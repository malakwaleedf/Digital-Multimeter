
DMM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e2  00800060  00004782  00004816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800242  00800242  000049f8  2**0
                  ALLOC
  3 .stab         000035d0  00000000  00000000  000049f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f9e  00000000  00000000  00007fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000933a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ce1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e128  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f029  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 22 	call	0x44f2	; 0x44f2 <main>
      8a:	0c 94 bf 23 	jmp	0x477e	; 0x477e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 73 23 	jmp	0x46e6	; 0x46e6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 23 	jmp	0x46be	; 0x46be <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e2       	ldi	r22, 0x26	; 38
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7b 23 	jmp	0x46f6	; 0x46f6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7f 23 	jmp	0x46fe	; 0x46fe <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 83 23 	jmp	0x4706	; 0x4706 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 5f 23 	jmp	0x46be	; 0x46be <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 7b 23 	jmp	0x46f6	; 0x46f6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e2 5d       	subi	r30, 0xD2	; 210
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(uint8 channel_num)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	//V_REF = vcc
	//V_REF = vcc
		SET_BIT(ADMUX,6);
     ef6:	a7 e2       	ldi	r26, 0x27	; 39
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e7 e2       	ldi	r30, 0x27	; 39
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 64       	ori	r24, 0x40	; 64
     f02:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,7);
     f04:	a7 e2       	ldi	r26, 0x27	; 39
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e7 e2       	ldi	r30, 0x27	; 39
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8f 77       	andi	r24, 0x7F	; 127
     f10:	8c 93       	st	X, r24
		//NO LEFT ADJ
		CLEAR_BIT(ADMUX,5);
     f12:	a7 e2       	ldi	r26, 0x27	; 39
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e7 e2       	ldi	r30, 0x27	; 39
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7d       	andi	r24, 0xDF	; 223
     f1e:	8c 93       	st	X, r24
		//CHANNEL 0 SINGLE
		CLEAR_BIT(ADMUX,4);
     f20:	a7 e2       	ldi	r26, 0x27	; 39
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e7 e2       	ldi	r30, 0x27	; 39
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8f 7e       	andi	r24, 0xEF	; 239
     f2c:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,3);
     f2e:	a7 e2       	ldi	r26, 0x27	; 39
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e7 e2       	ldi	r30, 0x27	; 39
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,2);
     f3c:	a7 e2       	ldi	r26, 0x27	; 39
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e7 e2       	ldi	r30, 0x27	; 39
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8b 7f       	andi	r24, 0xFB	; 251
     f48:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,1);
     f4a:	a7 e2       	ldi	r26, 0x27	; 39
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e7 e2       	ldi	r30, 0x27	; 39
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8d 7f       	andi	r24, 0xFD	; 253
     f56:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,0);
     f58:	a7 e2       	ldi	r26, 0x27	; 39
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e7 e2       	ldi	r30, 0x27	; 39
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8e 7f       	andi	r24, 0xFE	; 254
     f64:	8c 93       	st	X, r24
		ADMUX = ADMUX | channel_num;
     f66:	a7 e2       	ldi	r26, 0x27	; 39
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e7 e2       	ldi	r30, 0x27	; 39
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	90 81       	ld	r25, Z
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	89 2b       	or	r24, r25
     f74:	8c 93       	st	X, r24
		//PRESCALAR 128
		SET_BIT(ADCSRA,0);
     f76:	a6 e2       	ldi	r26, 0x26	; 38
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e2       	ldi	r30, 0x26	; 38
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
     f84:	a6 e2       	ldi	r26, 0x26	; 38
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e6 e2       	ldi	r30, 0x26	; 38
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,2);
     f92:	a6 e2       	ldi	r26, 0x26	; 38
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e6 e2       	ldi	r30, 0x26	; 38
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	84 60       	ori	r24, 0x04	; 4
     f9e:	8c 93       	st	X, r24
		//DISABLE INTERUPT
		CLEAR_BIT(ADCSRA,3);
     fa0:	a6 e2       	ldi	r26, 0x26	; 38
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e6 e2       	ldi	r30, 0x26	; 38
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	87 7f       	andi	r24, 0xF7	; 247
     fac:	8c 93       	st	X, r24
		//ENABLE ADC
		SET_BIT(ADCSRA,7);
     fae:	a6 e2       	ldi	r26, 0x26	; 38
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e6 e2       	ldi	r30, 0x26	; 38
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 68       	ori	r24, 0x80	; 128
     fba:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,6);
     fbc:	a6 e2       	ldi	r26, 0x26	; 38
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e6 e2       	ldi	r30, 0x26	; 38
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	8c 93       	st	X, r24
}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <ADC_readChannel>:
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */

uint8 ADC_readChannel(uint16* result)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <ADC_readChannel+0x6>
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(ADCSRA,4)) {
     fe2:	e6 e2       	ldi	r30, 0x26	; 38
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	80 71       	andi	r24, 0x10	; 16
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	95 95       	asr	r25
     ff2:	87 95       	ror	r24
     ff4:	95 95       	asr	r25
     ff6:	87 95       	ror	r24
     ff8:	95 95       	asr	r25
     ffa:	87 95       	ror	r24
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	19 f1       	breq	.+70     	; 0x104a <ADC_readChannel+0x78>
		ADCW&=(0b0000001111111111);
    1004:	a4 e2       	ldi	r26, 0x24	; 36
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e4 e2       	ldi	r30, 0x24	; 36
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	93 70       	andi	r25, 0x03	; 3
    1012:	11 96       	adiw	r26, 0x01	; 1
    1014:	9c 93       	st	X, r25
    1016:	8e 93       	st	-X, r24
		*result = ADCW;
    1018:	e4 e2       	ldi	r30, 0x24	; 36
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	e9 81       	ldd	r30, Y+1	; 0x01
    1022:	fa 81       	ldd	r31, Y+2	; 0x02
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24
		SET_BIT(ADCSRA,4);
    1028:	a6 e2       	ldi	r26, 0x26	; 38
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e6 e2       	ldi	r30, 0x26	; 38
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 61       	ori	r24, 0x10	; 16
    1034:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,6);
    1036:	a6 e2       	ldi	r26, 0x26	; 38
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e6 e2       	ldi	r30, 0x26	; 38
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	80 64       	ori	r24, 0x40	; 64
    1042:	8c 93       	st	X, r24
		return 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	01 c0       	rjmp	.+2      	; 0x104c <ADC_readChannel+0x7a>
	}
	return 0;
    104a:	1b 82       	std	Y+3, r1	; 0x03
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <ADC_initacameter>:


//for ac ameter
void ADC_initacameter() {
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    // Set reference to internal 2.56V and right adjust the result
    ADMUX = (1<<REFS1) | (1<<REFS0);
    1062:	e7 e2       	ldi	r30, 0x27	; 39
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 ec       	ldi	r24, 0xC0	; 192
    1068:	80 83       	st	Z, r24
    // Enable ADC, set prescaler to 128 for stability
    ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    106a:	e6 e2       	ldi	r30, 0x26	; 38
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	87 e8       	ldi	r24, 0x87	; 135
    1070:	80 83       	st	Z, r24
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <ADC_readChannelacameter>:

uint16_t ADC_readChannelacameter(uint8_t channel) {
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01
    // Select ADC channel with safety mask
    ADMUX = (ADMUX & 0xE0) | (channel & 0x1F);
    1084:	a7 e2       	ldi	r26, 0x27	; 39
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e7 e2       	ldi	r30, 0x27	; 39
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	98 2f       	mov	r25, r24
    1090:	90 7e       	andi	r25, 0xE0	; 224
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	8f 71       	andi	r24, 0x1F	; 31
    1096:	89 2b       	or	r24, r25
    1098:	8c 93       	st	X, r24
    // Start single conversion
    ADCSRA |= (1<<ADSC);
    109a:	a6 e2       	ldi	r26, 0x26	; 38
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e6 e2       	ldi	r30, 0x26	; 38
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 64       	ori	r24, 0x40	; 64
    10a6:	8c 93       	st	X, r24
    // Wait for conversion to complete
    while (ADCSRA & (1<<ADSC));
    10a8:	e6 e2       	ldi	r30, 0x26	; 38
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	80 74       	andi	r24, 0x40	; 64
    10b4:	90 70       	andi	r25, 0x00	; 0
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	b9 f7       	brne	.-18     	; 0x10a8 <ADC_readChannelacameter+0x30>
    // Return ADC value
    return ADC;
    10ba:	e4 e2       	ldi	r30, 0x24	; 36
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
}
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <GPIO_setupPinDirection+0x6>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_setupPinDirection+0x8>
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
    10dc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <GPIO_setupPinDirection+0x1c>
    10e4:	d5 c0       	rjmp	.+426    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <GPIO_setupPinDirection+0x24>
    10ec:	d1 c0       	rjmp	.+418    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3d 83       	std	Y+5, r19	; 0x05
    10f6:	2c 83       	std	Y+4, r18	; 0x04
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <GPIO_setupPinDirection+0x3a>
    1102:	43 c0       	rjmp	.+134    	; 0x118a <GPIO_setupPinDirection+0xc0>
    1104:	2c 81       	ldd	r18, Y+4	; 0x04
    1106:	3d 81       	ldd	r19, Y+5	; 0x05
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <GPIO_setupPinDirection+0x4e>
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	71 f0       	breq	.+28     	; 0x1132 <GPIO_setupPinDirection+0x68>
    1116:	bc c0       	rjmp	.+376    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <GPIO_setupPinDirection+0x5a>
    1122:	5f c0       	rjmp	.+190    	; 0x11e2 <GPIO_setupPinDirection+0x118>
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <GPIO_setupPinDirection+0x66>
    112e:	85 c0       	rjmp	.+266    	; 0x123a <GPIO_setupPinDirection+0x170>
    1130:	af c0       	rjmp	.+350    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	a1 f4       	brne	.+40     	; 0x1160 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1138:	aa e3       	ldi	r26, 0x3A	; 58
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ea e3       	ldi	r30, 0x3A	; 58
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_setupPinDirection+0x8c>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_setupPinDirection+0x88>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	98 c0       	rjmp	.+304    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1160:	aa e3       	ldi	r26, 0x3A	; 58
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ea e3       	ldi	r30, 0x3A	; 58
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_setupPinDirection+0xb4>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_setupPinDirection+0xb0>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	83 c0       	rjmp	.+262    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	a1 f4       	brne	.+40     	; 0x11b8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1190:	a7 e3       	ldi	r26, 0x37	; 55
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e7 e3       	ldi	r30, 0x37	; 55
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_setupPinDirection+0xe4>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_setupPinDirection+0xe0>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	6c c0       	rjmp	.+216    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11b8:	a7 e3       	ldi	r26, 0x37	; 55
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e7 e3       	ldi	r30, 0x37	; 55
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_setupPinDirection+0x10c>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_setupPinDirection+0x108>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	57 c0       	rjmp	.+174    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	a1 f4       	brne	.+40     	; 0x1210 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11e8:	a4 e3       	ldi	r26, 0x34	; 52
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e4 e3       	ldi	r30, 0x34	; 52
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_setupPinDirection+0x13c>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_setupPinDirection+0x138>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	40 c0       	rjmp	.+128    	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1210:	a4 e3       	ldi	r26, 0x34	; 52
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e4 e3       	ldi	r30, 0x34	; 52
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_setupPinDirection+0x164>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_setupPinDirection+0x160>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	2b c0       	rjmp	.+86     	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	a1 f4       	brne	.+40     	; 0x1268 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1240:	a1 e3       	ldi	r26, 0x31	; 49
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e1 e3       	ldi	r30, 0x31	; 49
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <GPIO_setupPinDirection+0x194>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <GPIO_setupPinDirection+0x190>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	14 c0       	rjmp	.+40     	; 0x1290 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1268:	a1 e3       	ldi	r26, 0x31	; 49
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e1 e3       	ldi	r30, 0x31	; 49
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GPIO_setupPinDirection+0x1bc>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GPIO_setupPinDirection+0x1b8>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <GPIO_writePin+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <GPIO_writePin+0x8>
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	6a 83       	std	Y+2, r22	; 0x02
    12b2:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	88 30       	cpi	r24, 0x08	; 8
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <GPIO_writePin+0x1c>
    12ba:	d5 c0       	rjmp	.+426    	; 0x1466 <GPIO_writePin+0x1c6>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	84 30       	cpi	r24, 0x04	; 4
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <GPIO_writePin+0x24>
    12c2:	d1 c0       	rjmp	.+418    	; 0x1466 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3d 83       	std	Y+5, r19	; 0x05
    12cc:	2c 83       	std	Y+4, r18	; 0x04
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <GPIO_writePin+0x3a>
    12d8:	43 c0       	rjmp	.+134    	; 0x1360 <GPIO_writePin+0xc0>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	2c f4       	brge	.+10     	; 0x12ee <GPIO_writePin+0x4e>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	71 f0       	breq	.+28     	; 0x1308 <GPIO_writePin+0x68>
    12ec:	bc c0       	rjmp	.+376    	; 0x1466 <GPIO_writePin+0x1c6>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <GPIO_writePin+0x5a>
    12f8:	5f c0       	rjmp	.+190    	; 0x13b8 <GPIO_writePin+0x118>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <GPIO_writePin+0x66>
    1304:	85 c0       	rjmp	.+266    	; 0x1410 <GPIO_writePin+0x170>
    1306:	af c0       	rjmp	.+350    	; 0x1466 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == 0)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 23       	and	r24, r24
    130c:	a9 f4       	brne	.+42     	; 0x1338 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_writePin+0x8c>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_writePin+0x88>
    1330:	80 95       	com	r24
    1332:	84 23       	and	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	97 c0       	rjmp	.+302    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    1338:	ab e3       	ldi	r26, 0x3B	; 59
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_writePin+0xb6>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_writePin+0xb2>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	83 c0       	rjmp	.+262    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == 0)
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	88 23       	and	r24, r24
    1364:	a9 f4       	brne	.+42     	; 0x1390 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    1366:	a8 e3       	ldi	r26, 0x38	; 56
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <GPIO_writePin+0xe4>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <GPIO_writePin+0xe0>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	6b c0       	rjmp	.+214    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    1390:	a8 e3       	ldi	r26, 0x38	; 56
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e3       	ldi	r30, 0x38	; 56
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_writePin+0x10e>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_writePin+0x10a>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	57 c0       	rjmp	.+174    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == 0)
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 23       	and	r24, r24
    13bc:	a9 f4       	brne	.+42     	; 0x13e8 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    13be:	a5 e3       	ldi	r26, 0x35	; 53
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e3       	ldi	r30, 0x35	; 53
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <GPIO_writePin+0x13c>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <GPIO_writePin+0x138>
    13e0:	80 95       	com	r24
    13e2:	84 23       	and	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_writePin+0x166>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_writePin+0x162>
    140a:	84 2b       	or	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	2b c0       	rjmp	.+86     	; 0x1466 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == 0)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 23       	and	r24, r24
    1414:	a9 f4       	brne	.+42     	; 0x1440 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    1416:	a2 e3       	ldi	r26, 0x32	; 50
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e2 e3       	ldi	r30, 0x32	; 50
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <GPIO_writePin+0x194>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <GPIO_writePin+0x190>
    1438:	80 95       	com	r24
    143a:	84 23       	and	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	13 c0       	rjmp	.+38     	; 0x1466 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <GPIO_writePin+0x1be>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <GPIO_writePin+0x1ba>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24

		}

	}

}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <GPIO_readPin+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <GPIO_readPin+0x8>
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	18 f4       	brcc	.+6      	; 0x1494 <GPIO_readPin+0x1e>
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	84 30       	cpi	r24, 0x04	; 4
    1492:	10 f0       	brcs	.+4      	; 0x1498 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1494:	1d 82       	std	Y+5, r1	; 0x05
    1496:	82 c0       	rjmp	.+260    	; 0x159c <GPIO_readPin+0x126>
	}
	else
	{
		switch (port_num)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3c 83       	std	Y+4, r19	; 0x04
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	4b 81       	ldd	r20, Y+3	; 0x03
    14a4:	5c 81       	ldd	r21, Y+4	; 0x04
    14a6:	41 30       	cpi	r20, 0x01	; 1
    14a8:	51 05       	cpc	r21, r1
    14aa:	79 f1       	breq	.+94     	; 0x150a <GPIO_readPin+0x94>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	91 05       	cpc	r25, r1
    14b4:	34 f4       	brge	.+12     	; 0x14c2 <GPIO_readPin+0x4c>
    14b6:	2b 81       	ldd	r18, Y+3	; 0x03
    14b8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ba:	21 15       	cp	r18, r1
    14bc:	31 05       	cpc	r19, r1
    14be:	69 f0       	breq	.+26     	; 0x14da <GPIO_readPin+0x64>
    14c0:	6c c0       	rjmp	.+216    	; 0x159a <GPIO_readPin+0x124>
    14c2:	4b 81       	ldd	r20, Y+3	; 0x03
    14c4:	5c 81       	ldd	r21, Y+4	; 0x04
    14c6:	42 30       	cpi	r20, 0x02	; 2
    14c8:	51 05       	cpc	r21, r1
    14ca:	b9 f1       	breq	.+110    	; 0x153a <GPIO_readPin+0xc4>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <GPIO_readPin+0x62>
    14d6:	49 c0       	rjmp	.+146    	; 0x156a <GPIO_readPin+0xf4>
    14d8:	60 c0       	rjmp	.+192    	; 0x159a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    14da:	e9 e3       	ldi	r30, 0x39	; 57
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_readPin+0x7c>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_readPin+0x78>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	90 70       	andi	r25, 0x00	; 0
    14fc:	88 23       	and	r24, r24
    14fe:	19 f0       	breq	.+6      	; 0x1506 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    1500:	51 e0       	ldi	r21, 0x01	; 1
    1502:	5d 83       	std	Y+5, r21	; 0x05
    1504:	4b c0       	rjmp	.+150    	; 0x159c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1506:	1d 82       	std	Y+5, r1	; 0x05
    1508:	49 c0       	rjmp	.+146    	; 0x159c <GPIO_readPin+0x126>
			}

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    150a:	e6 e3       	ldi	r30, 0x36	; 54
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a9 01       	movw	r20, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_readPin+0xac>
    151e:	55 95       	asr	r21
    1520:	47 95       	ror	r20
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_readPin+0xa8>
    1526:	ca 01       	movw	r24, r20
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	90 70       	andi	r25, 0x00	; 0
    152c:	88 23       	and	r24, r24
    152e:	19 f0       	breq	.+6      	; 0x1536 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    1530:	51 e0       	ldi	r21, 0x01	; 1
    1532:	5d 83       	std	Y+5, r21	; 0x05
    1534:	33 c0       	rjmp	.+102    	; 0x159c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1536:	1d 82       	std	Y+5, r1	; 0x05
    1538:	31 c0       	rjmp	.+98     	; 0x159c <GPIO_readPin+0x126>
			}

		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    153a:	e3 e3       	ldi	r30, 0x33	; 51
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a9 01       	movw	r20, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_readPin+0xdc>
    154e:	55 95       	asr	r21
    1550:	47 95       	ror	r20
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_readPin+0xd8>
    1556:	ca 01       	movw	r24, r20
    1558:	81 70       	andi	r24, 0x01	; 1
    155a:	90 70       	andi	r25, 0x00	; 0
    155c:	88 23       	and	r24, r24
    155e:	19 f0       	breq	.+6      	; 0x1566 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    1560:	51 e0       	ldi	r21, 0x01	; 1
    1562:	5d 83       	std	Y+5, r21	; 0x05
    1564:	1b c0       	rjmp	.+54     	; 0x159c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1566:	1d 82       	std	Y+5, r1	; 0x05
    1568:	19 c0       	rjmp	.+50     	; 0x159c <GPIO_readPin+0x126>
			}

		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    156a:	e0 e3       	ldi	r30, 0x30	; 48
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a9 01       	movw	r20, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_readPin+0x10c>
    157e:	55 95       	asr	r21
    1580:	47 95       	ror	r20
    1582:	8a 95       	dec	r24
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_readPin+0x108>
    1586:	ca 01       	movw	r24, r20
    1588:	81 70       	andi	r24, 0x01	; 1
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	88 23       	and	r24, r24
    158e:	19 f0       	breq	.+6      	; 0x1596 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    1590:	51 e0       	ldi	r21, 0x01	; 1
    1592:	5d 83       	std	Y+5, r21	; 0x05
    1594:	03 c0       	rjmp	.+6      	; 0x159c <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1596:	1d 82       	std	Y+5, r1	; 0x05
    1598:	01 c0       	rjmp	.+2      	; 0x159c <GPIO_readPin+0x126>
			}

		default:
			return LOGIC_LOW;
    159a:	1d 82       	std	Y+5, r1	; 0x05
    159c:	8d 81       	ldd	r24, Y+5	; 0x05

		}
	}

}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_setupPortDirection+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_setupPortDirection+0x8>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	90 f5       	brcc	.+100    	; 0x1628 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3c 83       	std	Y+4, r19	; 0x04
    15cc:	2b 83       	std	Y+3, r18	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	d1 f0       	breq	.+52     	; 0x160c <GPIO_setupPortDirection+0x5e>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <GPIO_setupPortDirection+0x3e>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <GPIO_setupPortDirection+0x54>
    15ea:	1e c0       	rjmp	.+60     	; 0x1628 <GPIO_setupPortDirection+0x7a>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	81 f0       	breq	.+32     	; 0x1616 <GPIO_setupPortDirection+0x68>
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	81 f0       	breq	.+32     	; 0x1620 <GPIO_setupPortDirection+0x72>
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1602:	ea e3       	ldi	r30, 0x3A	; 58
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	80 83       	st	Z, r24
    160a:	0e c0       	rjmp	.+28     	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    160c:	e7 e3       	ldi	r30, 0x37	; 55
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	80 83       	st	Z, r24
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1616:	e4 e3       	ldi	r30, 0x34	; 52
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	80 83       	st	Z, r24
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1620:	e1 e3       	ldi	r30, 0x31	; 49
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	80 83       	st	Z, r24
			break;
		}
	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_writePort+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_writePort+0x8>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	90 f5       	brcc	.+100    	; 0x16b0 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3c 83       	std	Y+4, r19	; 0x04
    1654:	2b 83       	std	Y+3, r18	; 0x03
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	d1 f0       	breq	.+52     	; 0x1694 <GPIO_writePort+0x5e>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <GPIO_writePort+0x3e>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 f0       	breq	.+24     	; 0x168a <GPIO_writePort+0x54>
    1672:	1e c0       	rjmp	.+60     	; 0x16b0 <GPIO_writePort+0x7a>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	81 f0       	breq	.+32     	; 0x169e <GPIO_writePort+0x68>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <GPIO_writePort+0x72>
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    168a:	eb e3       	ldi	r30, 0x3B	; 59
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	80 83       	st	Z, r24
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1694:	e8 e3       	ldi	r30, 0x38	; 56
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	80 83       	st	Z, r24
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    169e:	e5 e3       	ldi	r30, 0x35	; 53
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	80 83       	st	Z, r24
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16a8:	e2 e3       	ldi	r30, 0x32	; 50
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
			break;
		}

	}

}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <GPIO_readPort+0x6>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <GPIO_readPort+0x8>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	10 f0       	brcs	.+4      	; 0x16d6 <GPIO_readPort+0x18>
	{
		return 0;
    16d2:	1c 82       	std	Y+4, r1	; 0x04
    16d4:	34 c0       	rjmp	.+104    	; 0x173e <GPIO_readPort+0x80>
	}
	else
	{
		switch(port_num)
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3b 83       	std	Y+3, r19	; 0x03
    16de:	2a 83       	std	Y+2, r18	; 0x02
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	d1 f0       	breq	.+52     	; 0x171e <GPIO_readPort+0x60>
    16ea:	2a 81       	ldd	r18, Y+2	; 0x02
    16ec:	3b 81       	ldd	r19, Y+3	; 0x03
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	2c f4       	brge	.+10     	; 0x16fe <GPIO_readPort+0x40>
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	9b 81       	ldd	r25, Y+3	; 0x03
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	61 f0       	breq	.+24     	; 0x1714 <GPIO_readPort+0x56>
    16fc:	1f c0       	rjmp	.+62     	; 0x173c <GPIO_readPort+0x7e>
    16fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1700:	3b 81       	ldd	r19, Y+3	; 0x03
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	81 f0       	breq	.+32     	; 0x1728 <GPIO_readPort+0x6a>
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	9b 81       	ldd	r25, Y+3	; 0x03
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	81 f0       	breq	.+32     	; 0x1732 <GPIO_readPort+0x74>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PINA;
    1714:	e9 e3       	ldi	r30, 0x39	; 57
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	90 81       	ld	r25, Z
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	10 c0       	rjmp	.+32     	; 0x173e <GPIO_readPort+0x80>
		case PORTB_ID:
			return PINB;
    171e:	e6 e3       	ldi	r30, 0x36	; 54
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	20 81       	ld	r18, Z
    1724:	2c 83       	std	Y+4, r18	; 0x04
    1726:	0b c0       	rjmp	.+22     	; 0x173e <GPIO_readPort+0x80>
		case PORTC_ID:
			return PINC;
    1728:	e3 e3       	ldi	r30, 0x33	; 51
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	30 81       	ld	r19, Z
    172e:	3c 83       	std	Y+4, r19	; 0x04
    1730:	06 c0       	rjmp	.+12     	; 0x173e <GPIO_readPort+0x80>
		case PORTD_ID:
			return PIND;
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8c 83       	std	Y+4, r24	; 0x04
    173a:	01 c0       	rjmp	.+2      	; 0x173e <GPIO_readPort+0x80>
		default:
			return 0;
    173c:	1c 82       	std	Y+4, r1	; 0x04
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}

}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <KEYPAD_getPressedKeyPolling>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKeyPolling(void)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	60 97       	sbiw	r28, 0x10	; 16
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	63 e0       	ldi	r22, 0x03	; 3
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	64 e0       	ldi	r22, 0x04	; 4
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	65 e0       	ldi	r22, 0x05	; 5
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	66 e0       	ldi	r22, 0x06	; 6
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	67 e0       	ldi	r22, 0x07	; 7
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    17b2:	1f 86       	std	Y+15, r1	; 0x0f
    17b4:	ab c0       	rjmp	.+342    	; 0x190c <KEYPAD_getPressedKeyPolling+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17ca:	18 8a       	std	Y+16, r1	; 0x10
    17cc:	22 c0       	rjmp	.+68     	; 0x1812 <KEYPAD_getPressedKeyPolling+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    17ce:	88 89       	ldd	r24, Y+16	; 0x10
    17d0:	98 2f       	mov	r25, r24
    17d2:	9c 5f       	subi	r25, 0xFC	; 252
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	69 2f       	mov	r22, r25
    17d8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_readPin>
    17dc:	88 23       	and	r24, r24
    17de:	b1 f4       	brne	.+44     	; 0x180c <KEYPAD_getPressedKeyPolling+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    17e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	98 2f       	mov	r25, r24
    17f0:	88 89       	ldd	r24, Y+16	; 0x10
    17f2:	89 0f       	add	r24, r25
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    17fa:	60 96       	adiw	r28, 0x10	; 16
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    180c:	88 89       	ldd	r24, Y+16	; 0x10
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	88 8b       	std	Y+16, r24	; 0x10
    1812:	88 89       	ldd	r24, Y+16	; 0x10
    1814:	84 30       	cpi	r24, 0x04	; 4
    1816:	d8 f2       	brcs	.-74     	; 0x17ce <KEYPAD_getPressedKeyPolling+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	6f 85       	ldd	r22, Y+15	; 0x0f
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 ea       	ldi	r26, 0xA0	; 160
    1828:	b0 e4       	ldi	r27, 0x40	; 64
    182a:	8b 87       	std	Y+11, r24	; 0x0b
    182c:	9c 87       	std	Y+12, r25	; 0x0c
    182e:	ad 87       	std	Y+13, r26	; 0x0d
    1830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	6b 85       	ldd	r22, Y+11	; 0x0b
    1834:	7c 85       	ldd	r23, Y+12	; 0x0c
    1836:	8d 85       	ldd	r24, Y+13	; 0x0d
    1838:	9e 85       	ldd	r25, Y+14	; 0x0e
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a e7       	ldi	r20, 0x7A	; 122
    1840:	53 e4       	ldi	r21, 0x43	; 67
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	8f 83       	std	Y+7, r24	; 0x07
    184c:	98 87       	std	Y+8, r25	; 0x08
    184e:	a9 87       	std	Y+9, r26	; 0x09
    1850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1852:	6f 81       	ldd	r22, Y+7	; 0x07
    1854:	78 85       	ldd	r23, Y+8	; 0x08
    1856:	89 85       	ldd	r24, Y+9	; 0x09
    1858:	9a 85       	ldd	r25, Y+10	; 0x0a
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e8       	ldi	r20, 0x80	; 128
    1860:	5f e3       	ldi	r21, 0x3F	; 63
    1862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1866:	88 23       	and	r24, r24
    1868:	2c f4       	brge	.+10     	; 0x1874 <KEYPAD_getPressedKeyPolling+0x126>
		__ticks = 1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
    1872:	3f c0       	rjmp	.+126    	; 0x18f2 <KEYPAD_getPressedKeyPolling+0x1a4>
	else if (__tmp > 65535)
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	3f ef       	ldi	r19, 0xFF	; 255
    1880:	4f e7       	ldi	r20, 0x7F	; 127
    1882:	57 e4       	ldi	r21, 0x47	; 71
    1884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1888:	18 16       	cp	r1, r24
    188a:	4c f5       	brge	.+82     	; 0x18de <KEYPAD_getPressedKeyPolling+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188c:	6b 85       	ldd	r22, Y+11	; 0x0b
    188e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1890:	8d 85       	ldd	r24, Y+13	; 0x0d
    1892:	9e 85       	ldd	r25, Y+14	; 0x0e
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <KEYPAD_getPressedKeyPolling+0x186>
    18b6:	89 e1       	ldi	r24, 0x19	; 25
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <KEYPAD_getPressedKeyPolling+0x174>
    18c6:	9c 83       	std	Y+4, r25	; 0x04
    18c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	9e 83       	std	Y+6, r25	; 0x06
    18d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	9e 81       	ldd	r25, Y+6	; 0x06
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	69 f7       	brne	.-38     	; 0x18b6 <KEYPAD_getPressedKeyPolling+0x168>
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <KEYPAD_getPressedKeyPolling+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <KEYPAD_getPressedKeyPolling+0x1b0>
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1906:	8f 85       	ldd	r24, Y+15	; 0x0f
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	8f 87       	std	Y+15, r24	; 0x0f
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	08 f4       	brcc	.+2      	; 0x1914 <KEYPAD_getPressedKeyPolling+0x1c6>
    1912:	51 cf       	rjmp	.-350    	; 0x17b6 <KEYPAD_getPressedKeyPolling+0x68>
    1914:	4e cf       	rjmp	.-356    	; 0x17b2 <KEYPAD_getPressedKeyPolling+0x64>

00001916 <KEYPAD_getPressedKeyInterrupts>:
		}
	}	
}

void KEYPAD_getPressedKeyInterrupts(uint8* a)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	62 97       	sbiw	r28, 0x12	; 18
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	9a 8b       	std	Y+18, r25	; 0x12
    192c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	62 e0       	ldi	r22, 0x02	; 2
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	63 e0       	ldi	r22, 0x03	; 3
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	64 e0       	ldi	r22, 0x04	; 4
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	65 e0       	ldi	r22, 0x05	; 5
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	66 e0       	ldi	r22, 0x06	; 6
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	67 e0       	ldi	r22, 0x07	; 7
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    197e:	1f 86       	std	Y+15, r1	; 0x0f
    1980:	a6 c0       	rjmp	.+332    	; 0x1ace <KEYPAD_getPressedKeyInterrupts+0x1b8>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	6f 85       	ldd	r22, Y+15	; 0x0f
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1996:	18 8a       	std	Y+16, r1	; 0x10
    1998:	1d c0       	rjmp	.+58     	; 0x19d4 <KEYPAD_getPressedKeyInterrupts+0xbe>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    199a:	88 89       	ldd	r24, Y+16	; 0x10
    199c:	98 2f       	mov	r25, r24
    199e:	9c 5f       	subi	r25, 0xFC	; 252
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	69 2f       	mov	r22, r25
    19a4:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_readPin>
    19a8:	88 23       	and	r24, r24
    19aa:	89 f4       	brne	.+34     	; 0x19ce <KEYPAD_getPressedKeyInterrupts+0xb8>
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							*a = ((row*KEYPAD_NUM_COLS)+col+1);
							return;
						#else
							*a = KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    19ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	98 2f       	mov	r25, r24
    19bc:	88 89       	ldd	r24, Y+16	; 0x10
    19be:	89 0f       	add	r24, r25
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <KEYPAD_4x4_adjustKeyNumber>
    19c6:	e9 89       	ldd	r30, Y+17	; 0x11
    19c8:	fa 89       	ldd	r31, Y+18	; 0x12
    19ca:	80 83       	st	Z, r24
    19cc:	84 c0       	rjmp	.+264    	; 0x1ad6 <KEYPAD_getPressedKeyInterrupts+0x1c0>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    19ce:	88 89       	ldd	r24, Y+16	; 0x10
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	88 8b       	std	Y+16, r24	; 0x10
    19d4:	88 89       	ldd	r24, Y+16	; 0x10
    19d6:	84 30       	cpi	r24, 0x04	; 4
    19d8:	00 f3       	brcs	.-64     	; 0x199a <KEYPAD_getPressedKeyInterrupts+0x84>
							return;
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 ea       	ldi	r26, 0xA0	; 160
    19ea:	b0 e4       	ldi	r27, 0x40	; 64
    19ec:	8b 87       	std	Y+11, r24	; 0x0b
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	ad 87       	std	Y+13, r26	; 0x0d
    19f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a e7       	ldi	r20, 0x7A	; 122
    1a02:	53 e4       	ldi	r21, 0x43	; 67
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8f 83       	std	Y+7, r24	; 0x07
    1a0e:	98 87       	std	Y+8, r25	; 0x08
    1a10:	a9 87       	std	Y+9, r26	; 0x09
    1a12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <KEYPAD_getPressedKeyInterrupts+0x120>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <KEYPAD_getPressedKeyInterrupts+0x19e>
	else if (__tmp > 65535)
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <KEYPAD_getPressedKeyInterrupts+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <KEYPAD_getPressedKeyInterrupts+0x180>
    1a78:	89 e1       	ldi	r24, 0x19	; 25
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <KEYPAD_getPressedKeyInterrupts+0x16e>
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <KEYPAD_getPressedKeyInterrupts+0x162>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <KEYPAD_getPressedKeyInterrupts+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <KEYPAD_getPressedKeyInterrupts+0x1aa>
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	8f 87       	std	Y+15, r24	; 0x0f
    1ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	08 f4       	brcc	.+2      	; 0x1ad6 <KEYPAD_getPressedKeyInterrupts+0x1c0>
    1ad4:	56 cf       	rjmp	.-340    	; 0x1982 <KEYPAD_getPressedKeyInterrupts+0x6c>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
}
    1ad6:	62 96       	adiw	r28, 0x12	; 18
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <KEYPAD_4x4_adjustKeyNumber+0x6>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1af6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	3c 83       	std	Y+4, r19	; 0x04
    1b00:	2b 83       	std	Y+3, r18	; 0x03
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	88 30       	cpi	r24, 0x08	; 8
    1b08:	91 05       	cpc	r25, r1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b0c:	70 c0       	rjmp	.+224    	; 0x1bee <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b10:	3c 81       	ldd	r19, Y+4	; 0x04
    1b12:	29 30       	cpi	r18, 0x09	; 9
    1b14:	31 05       	cpc	r19, r1
    1b16:	5c f5       	brge	.+86     	; 0x1b6e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	91 05       	cpc	r25, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b22:	59 c0       	rjmp	.+178    	; 0x1bd6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	25 30       	cpi	r18, 0x05	; 5
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	9c f4       	brge	.+38     	; 0x1b54 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	91 05       	cpc	r25, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b38:	48 c0       	rjmp	.+144    	; 0x1bca <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	23 30       	cpi	r18, 0x03	; 3
    1b40:	31 05       	cpc	r19, r1
    1b42:	0c f0       	brlt	.+2      	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b44:	45 c0       	rjmp	.+138    	; 0x1bd0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b50:	39 c0       	rjmp	.+114    	; 0x1bc4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b52:	67 c0       	rjmp	.+206    	; 0x1c22 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	3c 81       	ldd	r19, Y+4	; 0x04
    1b58:	26 30       	cpi	r18, 0x06	; 6
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b5e:	41 c0       	rjmp	.+130    	; 0x1be2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	87 30       	cpi	r24, 0x07	; 7
    1b66:	91 05       	cpc	r25, r1
    1b68:	0c f0       	brlt	.+2      	; 0x1b6c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b6a:	3e c0       	rjmp	.+124    	; 0x1be8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b6c:	37 c0       	rjmp	.+110    	; 0x1bdc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	2c 30       	cpi	r18, 0x0C	; 12
    1b74:	31 05       	cpc	r19, r1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b78:	46 c0       	rjmp	.+140    	; 0x1c06 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	8d 30       	cpi	r24, 0x0D	; 13
    1b80:	91 05       	cpc	r25, r1
    1b82:	5c f4       	brge	.+22     	; 0x1b9a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	2a 30       	cpi	r18, 0x0A	; 10
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	b1 f1       	breq	.+108    	; 0x1bfa <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	8b 30       	cpi	r24, 0x0B	; 11
    1b94:	91 05       	cpc	r25, r1
    1b96:	a4 f5       	brge	.+104    	; 0x1c00 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b98:	2d c0       	rjmp	.+90     	; 0x1bf4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9e:	2e 30       	cpi	r18, 0x0E	; 14
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	b9 f1       	breq	.+110    	; 0x1c12 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	8e 30       	cpi	r24, 0x0E	; 14
    1baa:	91 05       	cpc	r25, r1
    1bac:	7c f1       	brlt	.+94     	; 0x1c0c <KEYPAD_4x4_adjustKeyNumber+0x124>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	2f 30       	cpi	r18, 0x0F	; 15
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	79 f1       	breq	.+94     	; 0x1c16 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	80 31       	cpi	r24, 0x10	; 16
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	69 f1       	breq	.+90     	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x134>
    1bc2:	2f c0       	rjmp	.+94     	; 0x1c22 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1bc4:	87 e0       	ldi	r24, 0x07	; 7
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	2e c0       	rjmp	.+92     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1bca:	88 e0       	ldi	r24, 0x08	; 8
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	2b c0       	rjmp	.+86     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1bd0:	89 e0       	ldi	r24, 0x09	; 9
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	28 c0       	rjmp	.+80     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1bd6:	85 e2       	ldi	r24, 0x25	; 37
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	25 c0       	rjmp	.+74     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	22 c0       	rjmp	.+68     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1be2:	85 e0       	ldi	r24, 0x05	; 5
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	1f c0       	rjmp	.+62     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1be8:	86 e0       	ldi	r24, 0x06	; 6
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	1c c0       	rjmp	.+56     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1bee:	8a e2       	ldi	r24, 0x2A	; 42
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	19 c0       	rjmp	.+50     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	16 c0       	rjmp	.+44     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	13 c0       	rjmp	.+38     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c00:	83 e0       	ldi	r24, 0x03	; 3
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	10 c0       	rjmp	.+32     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c06:	8d e2       	ldi	r24, 0x2D	; 45
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c0c:	8d e0       	ldi	r24, 0x0D	; 13
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	0a c0       	rjmp	.+20     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	08 c0       	rjmp	.+16     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c16:	8d e3       	ldi	r24, 0x3D	; 61
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c1c:	8b e2       	ldi	r24, 0x2B	; 43
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	2e 97       	sbiw	r28, 0x0e	; 14
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	64 e0       	ldi	r22, 0x04	; 4
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	65 e0       	ldi	r22, 0x05	; 5
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 ea       	ldi	r26, 0xA0	; 160
    1c64:	b1 e4       	ldi	r27, 0x41	; 65
    1c66:	8b 87       	std	Y+11, r24	; 0x0b
    1c68:	9c 87       	std	Y+12, r25	; 0x0c
    1c6a:	ad 87       	std	Y+13, r26	; 0x0d
    1c6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	53 e4       	ldi	r21, 0x43	; 67
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8f 83       	std	Y+7, r24	; 0x07
    1c88:	98 87       	std	Y+8, r25	; 0x08
    1c8a:	a9 87       	std	Y+9, r26	; 0x09
    1c8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <LCD_init+0x7a>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb2:	78 85       	ldd	r23, Y+8	; 0x08
    1cb4:	89 85       	ldd	r24, Y+9	; 0x09
    1cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	4c f5       	brge	.+82     	; 0x1d1a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <LCD_init+0xda>
    1cf2:	89 e1       	ldi	r24, 0x19	; 25
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <LCD_init+0xc8>
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <LCD_init+0xbc>
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1c:	78 85       	ldd	r23, Y+8	; 0x08
    1d1e:	89 85       	ldd	r24, Y+9	; 0x09
    1d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_init+0x104>
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	62 e0       	ldi	r22, 0x02	; 2
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	63 e0       	ldi	r22, 0x03	; 3
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1d6a:	83 e3       	ldi	r24, 0x33	; 51
    1d6c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1d70:	82 e3       	ldi	r24, 0x32	; 50
    1d72:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1d76:	88 e2       	ldi	r24, 0x28	; 40
    1d78:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d7c:	8c e0       	ldi	r24, 0x0C	; 12
    1d7e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_sendCommand>
}
    1d88:	2e 96       	adiw	r28, 0x0e	; 14
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	c3 56       	subi	r28, 0x63	; 99
    1da8:	d0 40       	sbci	r29, 0x00	; 0
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	fe 01       	movw	r30, r28
    1db6:	ed 59       	subi	r30, 0x9D	; 157
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1dbc:	83 e0       	ldi	r24, 0x03	; 3
    1dbe:	64 e0       	ldi	r22, 0x04	; 4
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e1 5a       	subi	r30, 0xA1	; 161
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e8       	ldi	r26, 0x80	; 128
    1dd2:	bf e3       	ldi	r27, 0x3F	; 63
    1dd4:	80 83       	st	Z, r24
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	a2 83       	std	Z+2, r26	; 0x02
    1dda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	8e 01       	movw	r16, r28
    1dde:	05 5a       	subi	r16, 0xA5	; 165
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	fe 01       	movw	r30, r28
    1de4:	e1 5a       	subi	r30, 0xA1	; 161
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	53 e4       	ldi	r21, 0x43	; 67
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	f8 01       	movw	r30, r16
    1e02:	80 83       	st	Z, r24
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	a2 83       	std	Z+2, r26	; 0x02
    1e08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e5 5a       	subi	r30, 0xA5	; 165
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	44 f4       	brge	.+16     	; 0x1e38 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e7 5a       	subi	r30, 0xA7	; 167
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	80 83       	st	Z, r24
    1e36:	64 c0       	rjmp	.+200    	; 0x1f00 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e5 5a       	subi	r30, 0xA5	; 165
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <LCD_sendCommand+0xbe>
    1e56:	43 c0       	rjmp	.+134    	; 0x1ede <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e1 5a       	subi	r30, 0xA1	; 161
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	8e 01       	movw	r16, r28
    1e78:	07 5a       	subi	r16, 0xA7	; 167
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	f8 01       	movw	r30, r16
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
    1e8e:	1f c0       	rjmp	.+62     	; 0x1ece <LCD_sendCommand+0x134>
    1e90:	fe 01       	movw	r30, r28
    1e92:	e9 5a       	subi	r30, 0xA9	; 169
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	89 e1       	ldi	r24, 0x19	; 25
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	80 83       	st	Z, r24
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e9 5a       	subi	r30, 0xA9	; 169
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_sendCommand+0x10e>
    1eac:	fe 01       	movw	r30, r28
    1eae:	e9 5a       	subi	r30, 0xA9	; 169
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	de 01       	movw	r26, r28
    1eb8:	a7 5a       	subi	r26, 0xA7	; 167
    1eba:	bf 4f       	sbci	r27, 0xFF	; 255
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e7 5a       	subi	r30, 0xA7	; 167
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	80 81       	ld	r24, Z
    1ec4:	91 81       	ldd	r25, Z+1	; 0x01
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	11 96       	adiw	r26, 0x01	; 1
    1eca:	9c 93       	st	X, r25
    1ecc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e7 5a       	subi	r30, 0xA7	; 167
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	d1 f6       	brne	.-76     	; 0x1e90 <LCD_sendCommand+0xf6>
    1edc:	27 c0       	rjmp	.+78     	; 0x1f2c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ede:	8e 01       	movw	r16, r28
    1ee0:	07 5a       	subi	r16, 0xA7	; 167
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e5 5a       	subi	r30, 0xA5	; 165
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	f8 01       	movw	r30, r16
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	80 83       	st	Z, r24
    1f00:	de 01       	movw	r26, r28
    1f02:	ab 5a       	subi	r26, 0xAB	; 171
    1f04:	bf 4f       	sbci	r27, 0xFF	; 255
    1f06:	fe 01       	movw	r30, r28
    1f08:	e7 5a       	subi	r30, 0xA7	; 167
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	8d 93       	st	X+, r24
    1f12:	9c 93       	st	X, r25
    1f14:	fe 01       	movw	r30, r28
    1f16:	eb 5a       	subi	r30, 0xAB	; 171
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_sendCommand+0x184>
    1f22:	fe 01       	movw	r30, r28
    1f24:	eb 5a       	subi	r30, 0xAB	; 171
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	65 e0       	ldi	r22, 0x05	; 5
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    1f36:	fe 01       	movw	r30, r28
    1f38:	ef 5a       	subi	r30, 0xAF	; 175
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a0 e8       	ldi	r26, 0x80	; 128
    1f42:	bf e3       	ldi	r27, 0x3F	; 63
    1f44:	80 83       	st	Z, r24
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	a2 83       	std	Z+2, r26	; 0x02
    1f4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	8e 01       	movw	r16, r28
    1f4e:	03 5b       	subi	r16, 0xB3	; 179
    1f50:	1f 4f       	sbci	r17, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	ef 5a       	subi	r30, 0xAF	; 175
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	60 81       	ld	r22, Z
    1f5a:	71 81       	ldd	r23, Z+1	; 0x01
    1f5c:	82 81       	ldd	r24, Z+2	; 0x02
    1f5e:	93 81       	ldd	r25, Z+3	; 0x03
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a e7       	ldi	r20, 0x7A	; 122
    1f66:	53 e4       	ldi	r21, 0x43	; 67
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	f8 01       	movw	r30, r16
    1f72:	80 83       	st	Z, r24
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	a2 83       	std	Z+2, r26	; 0x02
    1f78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e3 5b       	subi	r30, 0xB3	; 179
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e8       	ldi	r20, 0x80	; 128
    1f8e:	5f e3       	ldi	r21, 0x3F	; 63
    1f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f94:	88 23       	and	r24, r24
    1f96:	44 f4       	brge	.+16     	; 0x1fa8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e5 5b       	subi	r30, 0xB5	; 181
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
    1fa6:	64 c0       	rjmp	.+200    	; 0x2070 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e3 5b       	subi	r30, 0xB3	; 179
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	0c f0       	brlt	.+2      	; 0x1fc8 <LCD_sendCommand+0x22e>
    1fc6:	43 c0       	rjmp	.+134    	; 0x204e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ef 5a       	subi	r30, 0xAF	; 175
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8e 01       	movw	r16, r28
    1fe8:	05 5b       	subi	r16, 0xB5	; 181
    1fea:	1f 4f       	sbci	r17, 0xFF	; 255
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
    1ffe:	1f c0       	rjmp	.+62     	; 0x203e <LCD_sendCommand+0x2a4>
    2000:	fe 01       	movw	r30, r28
    2002:	e7 5b       	subi	r30, 0xB7	; 183
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	89 e1       	ldi	r24, 0x19	; 25
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
    200e:	fe 01       	movw	r30, r28
    2010:	e7 5b       	subi	r30, 0xB7	; 183
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_sendCommand+0x27e>
    201c:	fe 01       	movw	r30, r28
    201e:	e7 5b       	subi	r30, 0xB7	; 183
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	de 01       	movw	r26, r28
    2028:	a5 5b       	subi	r26, 0xB5	; 181
    202a:	bf 4f       	sbci	r27, 0xFF	; 255
    202c:	fe 01       	movw	r30, r28
    202e:	e5 5b       	subi	r30, 0xB5	; 181
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	11 96       	adiw	r26, 0x01	; 1
    203a:	9c 93       	st	X, r25
    203c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	fe 01       	movw	r30, r28
    2040:	e5 5b       	subi	r30, 0xB5	; 181
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	d1 f6       	brne	.-76     	; 0x2000 <LCD_sendCommand+0x266>
    204c:	27 c0       	rjmp	.+78     	; 0x209c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204e:	8e 01       	movw	r16, r28
    2050:	05 5b       	subi	r16, 0xB5	; 181
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	fe 01       	movw	r30, r28
    2056:	e3 5b       	subi	r30, 0xB3	; 179
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	f8 01       	movw	r30, r16
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
    2070:	de 01       	movw	r26, r28
    2072:	a9 5b       	subi	r26, 0xB9	; 185
    2074:	bf 4f       	sbci	r27, 0xFF	; 255
    2076:	fe 01       	movw	r30, r28
    2078:	e5 5b       	subi	r30, 0xB5	; 181
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	8d 93       	st	X+, r24
    2082:	9c 93       	st	X, r25
    2084:	fe 01       	movw	r30, r28
    2086:	e9 5b       	subi	r30, 0xB9	; 185
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_sendCommand+0x2f4>
    2092:	fe 01       	movw	r30, r28
    2094:	e9 5b       	subi	r30, 0xB9	; 185
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    209c:	fe 01       	movw	r30, r28
    209e:	ed 59       	subi	r30, 0x9D	; 157
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	80 71       	andi	r24, 0x10	; 16
    20aa:	90 70       	andi	r25, 0x00	; 0
    20ac:	95 95       	asr	r25
    20ae:	87 95       	ror	r24
    20b0:	95 95       	asr	r25
    20b2:	87 95       	ror	r24
    20b4:	95 95       	asr	r25
    20b6:	87 95       	ror	r24
    20b8:	95 95       	asr	r25
    20ba:	87 95       	ror	r24
    20bc:	98 2f       	mov	r25, r24
    20be:	83 e0       	ldi	r24, 0x03	; 3
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	49 2f       	mov	r20, r25
    20c4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    20c8:	fe 01       	movw	r30, r28
    20ca:	ed 59       	subi	r30, 0x9D	; 157
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 81       	ld	r24, Z
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	80 72       	andi	r24, 0x20	; 32
    20d6:	90 70       	andi	r25, 0x00	; 0
    20d8:	95 95       	asr	r25
    20da:	87 95       	ror	r24
    20dc:	95 95       	asr	r25
    20de:	87 95       	ror	r24
    20e0:	95 95       	asr	r25
    20e2:	87 95       	ror	r24
    20e4:	95 95       	asr	r25
    20e6:	87 95       	ror	r24
    20e8:	95 95       	asr	r25
    20ea:	87 95       	ror	r24
    20ec:	98 2f       	mov	r25, r24
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	61 e0       	ldi	r22, 0x01	; 1
    20f2:	49 2f       	mov	r20, r25
    20f4:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    20f8:	fe 01       	movw	r30, r28
    20fa:	ed 59       	subi	r30, 0x9D	; 157
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 81       	ld	r24, Z
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	80 74       	andi	r24, 0x40	; 64
    2106:	90 70       	andi	r25, 0x00	; 0
    2108:	08 2e       	mov	r0, r24
    210a:	89 2f       	mov	r24, r25
    210c:	00 0c       	add	r0, r0
    210e:	88 1f       	adc	r24, r24
    2110:	99 0b       	sbc	r25, r25
    2112:	00 0c       	add	r0, r0
    2114:	88 1f       	adc	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	98 2f       	mov	r25, r24
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	62 e0       	ldi	r22, 0x02	; 2
    211e:	49 2f       	mov	r20, r25
    2120:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2124:	fe 01       	movw	r30, r28
    2126:	ed 59       	subi	r30, 0x9D	; 157
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	98 2f       	mov	r25, r24
    212e:	99 1f       	adc	r25, r25
    2130:	99 27       	eor	r25, r25
    2132:	99 1f       	adc	r25, r25
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	63 e0       	ldi	r22, 0x03	; 3
    2138:	49 2f       	mov	r20, r25
    213a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    213e:	fe 01       	movw	r30, r28
    2140:	ed 5b       	subi	r30, 0xBD	; 189
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 e8       	ldi	r26, 0x80	; 128
    214a:	bf e3       	ldi	r27, 0x3F	; 63
    214c:	80 83       	st	Z, r24
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	a2 83       	std	Z+2, r26	; 0x02
    2152:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	8e 01       	movw	r16, r28
    2156:	01 5c       	subi	r16, 0xC1	; 193
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	fe 01       	movw	r30, r28
    215c:	ed 5b       	subi	r30, 0xBD	; 189
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	60 81       	ld	r22, Z
    2162:	71 81       	ldd	r23, Z+1	; 0x01
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a e7       	ldi	r20, 0x7A	; 122
    216e:	53 e4       	ldi	r21, 0x43	; 67
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	f8 01       	movw	r30, r16
    217a:	80 83       	st	Z, r24
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	a2 83       	std	Z+2, r26	; 0x02
    2180:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2182:	fe 01       	movw	r30, r28
    2184:	ff 96       	adiw	r30, 0x3f	; 63
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9e af       	std	Y+62, r25	; 0x3e
    21a4:	8d af       	std	Y+61, r24	; 0x3d
    21a6:	46 c0       	rjmp	.+140    	; 0x2234 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    21a8:	fe 01       	movw	r30, r28
    21aa:	ff 96       	adiw	r30, 0x3f	; 63
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	64 f5       	brge	.+88     	; 0x221c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	fe 01       	movw	r30, r28
    21c6:	ed 5b       	subi	r30, 0xBD	; 189
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e af       	std	Y+62, r25	; 0x3e
    21f0:	8d af       	std	Y+61, r24	; 0x3d
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <LCD_sendCommand+0x478>
    21f4:	89 e1       	ldi	r24, 0x19	; 25
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9c af       	std	Y+60, r25	; 0x3c
    21fa:	8b af       	std	Y+59, r24	; 0x3b
    21fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    21fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_sendCommand+0x466>
    2204:	9c af       	std	Y+60, r25	; 0x3c
    2206:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	8d ad       	ldd	r24, Y+61	; 0x3d
    220a:	9e ad       	ldd	r25, Y+62	; 0x3e
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	9e af       	std	Y+62, r25	; 0x3e
    2210:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	8d ad       	ldd	r24, Y+61	; 0x3d
    2214:	9e ad       	ldd	r25, Y+62	; 0x3e
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <LCD_sendCommand+0x45a>
    221a:	16 c0       	rjmp	.+44     	; 0x2248 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	fe 01       	movw	r30, r28
    221e:	ff 96       	adiw	r30, 0x3f	; 63
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e af       	std	Y+62, r25	; 0x3e
    2232:	8d af       	std	Y+61, r24	; 0x3d
    2234:	8d ad       	ldd	r24, Y+61	; 0x3d
    2236:	9e ad       	ldd	r25, Y+62	; 0x3e
    2238:	9a af       	std	Y+58, r25	; 0x3a
    223a:	89 af       	std	Y+57, r24	; 0x39
    223c:	89 ad       	ldd	r24, Y+57	; 0x39
    223e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <LCD_sendCommand+0x4a6>
    2244:	9a af       	std	Y+58, r25	; 0x3a
    2246:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	65 e0       	ldi	r22, 0x05	; 5
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	8d ab       	std	Y+53, r24	; 0x35
    225c:	9e ab       	std	Y+54, r25	; 0x36
    225e:	af ab       	std	Y+55, r26	; 0x37
    2260:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2262:	6d a9       	ldd	r22, Y+53	; 0x35
    2264:	7e a9       	ldd	r23, Y+54	; 0x36
    2266:	8f a9       	ldd	r24, Y+55	; 0x37
    2268:	98 ad       	ldd	r25, Y+56	; 0x38
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a e7       	ldi	r20, 0x7A	; 122
    2270:	53 e4       	ldi	r21, 0x43	; 67
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	89 ab       	std	Y+49, r24	; 0x31
    227c:	9a ab       	std	Y+50, r25	; 0x32
    227e:	ab ab       	std	Y+51, r26	; 0x33
    2280:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2282:	69 a9       	ldd	r22, Y+49	; 0x31
    2284:	7a a9       	ldd	r23, Y+50	; 0x32
    2286:	8b a9       	ldd	r24, Y+51	; 0x33
    2288:	9c a9       	ldd	r25, Y+52	; 0x34
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	98 ab       	std	Y+48, r25	; 0x30
    22a0:	8f a7       	std	Y+47, r24	; 0x2f
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    22a4:	69 a9       	ldd	r22, Y+49	; 0x31
    22a6:	7a a9       	ldd	r23, Y+50	; 0x32
    22a8:	8b a9       	ldd	r24, Y+51	; 0x33
    22aa:	9c a9       	ldd	r25, Y+52	; 0x34
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	6d a9       	ldd	r22, Y+53	; 0x35
    22be:	7e a9       	ldd	r23, Y+54	; 0x36
    22c0:	8f a9       	ldd	r24, Y+55	; 0x37
    22c2:	98 ad       	ldd	r25, Y+56	; 0x38
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	98 ab       	std	Y+48, r25	; 0x30
    22e2:	8f a7       	std	Y+47, r24	; 0x2f
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_sendCommand+0x56a>
    22e6:	89 e1       	ldi	r24, 0x19	; 25
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9e a7       	std	Y+46, r25	; 0x2e
    22ec:	8d a7       	std	Y+45, r24	; 0x2d
    22ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    22f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_sendCommand+0x558>
    22f6:	9e a7       	std	Y+46, r25	; 0x2e
    22f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fc:	98 a9       	ldd	r25, Y+48	; 0x30
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	98 ab       	std	Y+48, r25	; 0x30
    2302:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	8f a5       	ldd	r24, Y+47	; 0x2f
    2306:	98 a9       	ldd	r25, Y+48	; 0x30
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_sendCommand+0x54c>
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	69 a9       	ldd	r22, Y+49	; 0x31
    2310:	7a a9       	ldd	r23, Y+50	; 0x32
    2312:	8b a9       	ldd	r24, Y+51	; 0x33
    2314:	9c a9       	ldd	r25, Y+52	; 0x34
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	98 ab       	std	Y+48, r25	; 0x30
    2320:	8f a7       	std	Y+47, r24	; 0x2f
    2322:	8f a5       	ldd	r24, Y+47	; 0x2f
    2324:	98 a9       	ldd	r25, Y+48	; 0x30
    2326:	9c a7       	std	Y+44, r25	; 0x2c
    2328:	8b a7       	std	Y+43, r24	; 0x2b
    232a:	8b a5       	ldd	r24, Y+43	; 0x2b
    232c:	9c a5       	ldd	r25, Y+44	; 0x2c
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_sendCommand+0x594>
    2332:	9c a7       	std	Y+44, r25	; 0x2c
    2334:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	65 e0       	ldi	r22, 0x05	; 5
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e8       	ldi	r26, 0x80	; 128
    2346:	bf e3       	ldi	r27, 0x3F	; 63
    2348:	8f a3       	std	Y+39, r24	; 0x27
    234a:	98 a7       	std	Y+40, r25	; 0x28
    234c:	a9 a7       	std	Y+41, r26	; 0x29
    234e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2350:	6f a1       	ldd	r22, Y+39	; 0x27
    2352:	78 a5       	ldd	r23, Y+40	; 0x28
    2354:	89 a5       	ldd	r24, Y+41	; 0x29
    2356:	9a a5       	ldd	r25, Y+42	; 0x2a
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4a e7       	ldi	r20, 0x7A	; 122
    235e:	53 e4       	ldi	r21, 0x43	; 67
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8b a3       	std	Y+35, r24	; 0x23
    236a:	9c a3       	std	Y+36, r25	; 0x24
    236c:	ad a3       	std	Y+37, r26	; 0x25
    236e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2370:	6b a1       	ldd	r22, Y+35	; 0x23
    2372:	7c a1       	ldd	r23, Y+36	; 0x24
    2374:	8d a1       	ldd	r24, Y+37	; 0x25
    2376:	9e a1       	ldd	r25, Y+38	; 0x26
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2384:	88 23       	and	r24, r24
    2386:	2c f4       	brge	.+10     	; 0x2392 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9a a3       	std	Y+34, r25	; 0x22
    238e:	89 a3       	std	Y+33, r24	; 0x21
    2390:	3f c0       	rjmp	.+126    	; 0x2410 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2392:	6b a1       	ldd	r22, Y+35	; 0x23
    2394:	7c a1       	ldd	r23, Y+36	; 0x24
    2396:	8d a1       	ldd	r24, Y+37	; 0x25
    2398:	9e a1       	ldd	r25, Y+38	; 0x26
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	3f ef       	ldi	r19, 0xFF	; 255
    239e:	4f e7       	ldi	r20, 0x7F	; 127
    23a0:	57 e4       	ldi	r21, 0x47	; 71
    23a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	4c f5       	brge	.+82     	; 0x23fc <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23aa:	6f a1       	ldd	r22, Y+39	; 0x27
    23ac:	78 a5       	ldd	r23, Y+40	; 0x28
    23ae:	89 a5       	ldd	r24, Y+41	; 0x29
    23b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e2       	ldi	r20, 0x20	; 32
    23b8:	51 e4       	ldi	r21, 0x41	; 65
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9a a3       	std	Y+34, r25	; 0x22
    23d0:	89 a3       	std	Y+33, r24	; 0x21
    23d2:	0f c0       	rjmp	.+30     	; 0x23f2 <LCD_sendCommand+0x658>
    23d4:	89 e1       	ldi	r24, 0x19	; 25
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	98 a3       	std	Y+32, r25	; 0x20
    23da:	8f 8f       	std	Y+31, r24	; 0x1f
    23dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23de:	98 a1       	ldd	r25, Y+32	; 0x20
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <LCD_sendCommand+0x646>
    23e4:	98 a3       	std	Y+32, r25	; 0x20
    23e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ea:	9a a1       	ldd	r25, Y+34	; 0x22
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	9a a3       	std	Y+34, r25	; 0x22
    23f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f2:	89 a1       	ldd	r24, Y+33	; 0x21
    23f4:	9a a1       	ldd	r25, Y+34	; 0x22
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <LCD_sendCommand+0x63a>
    23fa:	14 c0       	rjmp	.+40     	; 0x2424 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	6b a1       	ldd	r22, Y+35	; 0x23
    23fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	9e a1       	ldd	r25, Y+38	; 0x26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9a a3       	std	Y+34, r25	; 0x22
    240e:	89 a3       	std	Y+33, r24	; 0x21
    2410:	89 a1       	ldd	r24, Y+33	; 0x21
    2412:	9a a1       	ldd	r25, Y+34	; 0x22
    2414:	9e 8f       	std	Y+30, r25	; 0x1e
    2416:	8d 8f       	std	Y+29, r24	; 0x1d
    2418:	8d 8d       	ldd	r24, Y+29	; 0x1d
    241a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <LCD_sendCommand+0x682>
    2420:	9e 8f       	std	Y+30, r25	; 0x1e
    2422:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2424:	fe 01       	movw	r30, r28
    2426:	ed 59       	subi	r30, 0x9D	; 157
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	80 81       	ld	r24, Z
    242c:	98 2f       	mov	r25, r24
    242e:	91 70       	andi	r25, 0x01	; 1
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	49 2f       	mov	r20, r25
    2436:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    243a:	fe 01       	movw	r30, r28
    243c:	ed 59       	subi	r30, 0x9D	; 157
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	82 70       	andi	r24, 0x02	; 2
    2448:	90 70       	andi	r25, 0x00	; 0
    244a:	95 95       	asr	r25
    244c:	87 95       	ror	r24
    244e:	98 2f       	mov	r25, r24
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	61 e0       	ldi	r22, 0x01	; 1
    2454:	49 2f       	mov	r20, r25
    2456:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    245a:	fe 01       	movw	r30, r28
    245c:	ed 59       	subi	r30, 0x9D	; 157
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	84 70       	andi	r24, 0x04	; 4
    2468:	90 70       	andi	r25, 0x00	; 0
    246a:	95 95       	asr	r25
    246c:	87 95       	ror	r24
    246e:	95 95       	asr	r25
    2470:	87 95       	ror	r24
    2472:	98 2f       	mov	r25, r24
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	49 2f       	mov	r20, r25
    247a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    247e:	fe 01       	movw	r30, r28
    2480:	ed 59       	subi	r30, 0x9D	; 157
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	88 70       	andi	r24, 0x08	; 8
    248c:	90 70       	andi	r25, 0x00	; 0
    248e:	95 95       	asr	r25
    2490:	87 95       	ror	r24
    2492:	95 95       	asr	r25
    2494:	87 95       	ror	r24
    2496:	95 95       	asr	r25
    2498:	87 95       	ror	r24
    249a:	98 2f       	mov	r25, r24
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	63 e0       	ldi	r22, 0x03	; 3
    24a0:	49 2f       	mov	r20, r25
    24a2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	89 8f       	std	Y+25, r24	; 0x19
    24b0:	9a 8f       	std	Y+26, r25	; 0x1a
    24b2:	ab 8f       	std	Y+27, r26	; 0x1b
    24b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	69 8d       	ldd	r22, Y+25	; 0x19
    24b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a e7       	ldi	r20, 0x7A	; 122
    24c4:	53 e4       	ldi	r21, 0x43	; 67
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8d 8b       	std	Y+21, r24	; 0x15
    24d0:	9e 8b       	std	Y+22, r25	; 0x16
    24d2:	af 8b       	std	Y+23, r26	; 0x17
    24d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_sendCommand+0x75e>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 8b       	std	Y+20, r25	; 0x14
    24f4:	8b 8b       	std	Y+19, r24	; 0x13
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    24f8:	6d 89       	ldd	r22, Y+21	; 0x15
    24fa:	7e 89       	ldd	r23, Y+22	; 0x16
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	69 8d       	ldd	r22, Y+25	; 0x19
    2512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_sendCommand+0x7be>
    253a:	89 e1       	ldi	r24, 0x19	; 25
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9a 8b       	std	Y+18, r25	; 0x12
    2540:	89 8b       	std	Y+17, r24	; 0x11
    2542:	89 89       	ldd	r24, Y+17	; 0x11
    2544:	9a 89       	ldd	r25, Y+18	; 0x12
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_sendCommand+0x7ac>
    254a:	9a 8b       	std	Y+18, r25	; 0x12
    254c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8b 89       	ldd	r24, Y+19	; 0x13
    2550:	9c 89       	ldd	r25, Y+20	; 0x14
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9c 8b       	std	Y+20, r25	; 0x14
    2556:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8b 89       	ldd	r24, Y+19	; 0x13
    255a:	9c 89       	ldd	r25, Y+20	; 0x14
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_sendCommand+0x7a0>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6d 89       	ldd	r22, Y+21	; 0x15
    2564:	7e 89       	ldd	r23, Y+22	; 0x16
    2566:	8f 89       	ldd	r24, Y+23	; 0x17
    2568:	98 8d       	ldd	r25, Y+24	; 0x18
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
    2576:	8b 89       	ldd	r24, Y+19	; 0x13
    2578:	9c 89       	ldd	r25, Y+20	; 0x14
    257a:	98 8b       	std	Y+16, r25	; 0x10
    257c:	8f 87       	std	Y+15, r24	; 0x0f
    257e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2580:	98 89       	ldd	r25, Y+16	; 0x10
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_sendCommand+0x7e8>
    2586:	98 8b       	std	Y+16, r25	; 0x10
    2588:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	65 e0       	ldi	r22, 0x05	; 5
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e8       	ldi	r26, 0x80	; 128
    259a:	bf e3       	ldi	r27, 0x3F	; 63
    259c:	8b 87       	std	Y+11, r24	; 0x0b
    259e:	9c 87       	std	Y+12, r25	; 0x0c
    25a0:	ad 87       	std	Y+13, r26	; 0x0d
    25a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	53 e4       	ldi	r21, 0x43	; 67
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8f 83       	std	Y+7, r24	; 0x07
    25be:	98 87       	std	Y+8, r25	; 0x08
    25c0:	a9 87       	std	Y+9, r26	; 0x09
    25c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	2c f4       	brge	.+10     	; 0x25e6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9e 83       	std	Y+6, r25	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	3f c0       	rjmp	.+126    	; 0x2664 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	4c f5       	brge	.+82     	; 0x2650 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2600:	7c 85       	ldd	r23, Y+12	; 0x0c
    2602:	8d 85       	ldd	r24, Y+13	; 0x0d
    2604:	9e 85       	ldd	r25, Y+14	; 0x0e
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	51 e4       	ldi	r21, 0x41	; 65
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <LCD_sendCommand+0x8ac>
    2628:	89 e1       	ldi	r24, 0x19	; 25
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_sendCommand+0x89a>
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	69 f7       	brne	.-38     	; 0x2628 <LCD_sendCommand+0x88e>
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_sendCommand+0x8d6>
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2678:	cd 59       	subi	r28, 0x9D	; 157
    267a:	df 4f       	sbci	r29, 0xFF	; 255
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	c3 56       	subi	r28, 0x63	; 99
    269e:	d0 40       	sbci	r29, 0x00	; 0
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	fe 01       	movw	r30, r28
    26ac:	ed 59       	subi	r30, 0x9D	; 157
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    26b2:	83 e0       	ldi	r24, 0x03	; 3
    26b4:	64 e0       	ldi	r22, 0x04	; 4
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    26bc:	fe 01       	movw	r30, r28
    26be:	e1 5a       	subi	r30, 0xA1	; 161
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e8       	ldi	r26, 0x80	; 128
    26c8:	bf e3       	ldi	r27, 0x3F	; 63
    26ca:	80 83       	st	Z, r24
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	a2 83       	std	Z+2, r26	; 0x02
    26d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d2:	8e 01       	movw	r16, r28
    26d4:	05 5a       	subi	r16, 0xA5	; 165
    26d6:	1f 4f       	sbci	r17, 0xFF	; 255
    26d8:	fe 01       	movw	r30, r28
    26da:	e1 5a       	subi	r30, 0xA1	; 161
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	60 81       	ld	r22, Z
    26e0:	71 81       	ldd	r23, Z+1	; 0x01
    26e2:	82 81       	ldd	r24, Z+2	; 0x02
    26e4:	93 81       	ldd	r25, Z+3	; 0x03
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	4a e7       	ldi	r20, 0x7A	; 122
    26ec:	53 e4       	ldi	r21, 0x43	; 67
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	f8 01       	movw	r30, r16
    26f8:	80 83       	st	Z, r24
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	a2 83       	std	Z+2, r26	; 0x02
    26fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2700:	fe 01       	movw	r30, r28
    2702:	e5 5a       	subi	r30, 0xA5	; 165
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	44 f4       	brge	.+16     	; 0x272e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    271e:	fe 01       	movw	r30, r28
    2720:	e7 5a       	subi	r30, 0xA7	; 167
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
    272c:	64 c0       	rjmp	.+200    	; 0x27f6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    272e:	fe 01       	movw	r30, r28
    2730:	e5 5a       	subi	r30, 0xA5	; 165
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	0c f0       	brlt	.+2      	; 0x274e <LCD_displayCharacter+0xbe>
    274c:	43 c0       	rjmp	.+134    	; 0x27d4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	fe 01       	movw	r30, r28
    2750:	e1 5a       	subi	r30, 0xA1	; 161
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	51 e4       	ldi	r21, 0x41	; 65
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	8e 01       	movw	r16, r28
    276e:	07 5a       	subi	r16, 0xA7	; 167
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	f8 01       	movw	r30, r16
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	80 83       	st	Z, r24
    2784:	1f c0       	rjmp	.+62     	; 0x27c4 <LCD_displayCharacter+0x134>
    2786:	fe 01       	movw	r30, r28
    2788:	e9 5a       	subi	r30, 0xA9	; 169
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	89 e1       	ldi	r24, 0x19	; 25
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
    2794:	fe 01       	movw	r30, r28
    2796:	e9 5a       	subi	r30, 0xA9	; 169
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <LCD_displayCharacter+0x10e>
    27a2:	fe 01       	movw	r30, r28
    27a4:	e9 5a       	subi	r30, 0xA9	; 169
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	de 01       	movw	r26, r28
    27ae:	a7 5a       	subi	r26, 0xA7	; 167
    27b0:	bf 4f       	sbci	r27, 0xFF	; 255
    27b2:	fe 01       	movw	r30, r28
    27b4:	e7 5a       	subi	r30, 0xA7	; 167
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	11 96       	adiw	r26, 0x01	; 1
    27c0:	9c 93       	st	X, r25
    27c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c4:	fe 01       	movw	r30, r28
    27c6:	e7 5a       	subi	r30, 0xA7	; 167
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	d1 f6       	brne	.-76     	; 0x2786 <LCD_displayCharacter+0xf6>
    27d2:	27 c0       	rjmp	.+78     	; 0x2822 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	8e 01       	movw	r16, r28
    27d6:	07 5a       	subi	r16, 0xA7	; 167
    27d8:	1f 4f       	sbci	r17, 0xFF	; 255
    27da:	fe 01       	movw	r30, r28
    27dc:	e5 5a       	subi	r30, 0xA5	; 165
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	f8 01       	movw	r30, r16
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    27f6:	de 01       	movw	r26, r28
    27f8:	ab 5a       	subi	r26, 0xAB	; 171
    27fa:	bf 4f       	sbci	r27, 0xFF	; 255
    27fc:	fe 01       	movw	r30, r28
    27fe:	e7 5a       	subi	r30, 0xA7	; 167
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	8d 93       	st	X+, r24
    2808:	9c 93       	st	X, r25
    280a:	fe 01       	movw	r30, r28
    280c:	eb 5a       	subi	r30, 0xAB	; 171
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <LCD_displayCharacter+0x184>
    2818:	fe 01       	movw	r30, r28
    281a:	eb 5a       	subi	r30, 0xAB	; 171
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	65 e0       	ldi	r22, 0x05	; 5
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    282c:	fe 01       	movw	r30, r28
    282e:	ef 5a       	subi	r30, 0xAF	; 175
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 e8       	ldi	r26, 0x80	; 128
    2838:	bf e3       	ldi	r27, 0x3F	; 63
    283a:	80 83       	st	Z, r24
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	a2 83       	std	Z+2, r26	; 0x02
    2840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	8e 01       	movw	r16, r28
    2844:	03 5b       	subi	r16, 0xB3	; 179
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	fe 01       	movw	r30, r28
    284a:	ef 5a       	subi	r30, 0xAF	; 175
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a e7       	ldi	r20, 0x7A	; 122
    285c:	53 e4       	ldi	r21, 0x43	; 67
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	f8 01       	movw	r30, r16
    2868:	80 83       	st	Z, r24
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	a2 83       	std	Z+2, r26	; 0x02
    286e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2870:	fe 01       	movw	r30, r28
    2872:	e3 5b       	subi	r30, 0xB3	; 179
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	60 81       	ld	r22, Z
    2878:	71 81       	ldd	r23, Z+1	; 0x01
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	44 f4       	brge	.+16     	; 0x289e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    288e:	fe 01       	movw	r30, r28
    2890:	e5 5b       	subi	r30, 0xB5	; 181
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
    289c:	64 c0       	rjmp	.+200    	; 0x2966 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    289e:	fe 01       	movw	r30, r28
    28a0:	e3 5b       	subi	r30, 0xB3	; 179
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	0c f0       	brlt	.+2      	; 0x28be <LCD_displayCharacter+0x22e>
    28bc:	43 c0       	rjmp	.+134    	; 0x2944 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	fe 01       	movw	r30, r28
    28c0:	ef 5a       	subi	r30, 0xAF	; 175
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	8e 01       	movw	r16, r28
    28de:	05 5b       	subi	r16, 0xB5	; 181
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	f8 01       	movw	r30, r16
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	80 83       	st	Z, r24
    28f4:	1f c0       	rjmp	.+62     	; 0x2934 <LCD_displayCharacter+0x2a4>
    28f6:	fe 01       	movw	r30, r28
    28f8:	e7 5b       	subi	r30, 0xB7	; 183
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	89 e1       	ldi	r24, 0x19	; 25
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
    2904:	fe 01       	movw	r30, r28
    2906:	e7 5b       	subi	r30, 0xB7	; 183
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 81       	ld	r24, Z
    290c:	91 81       	ldd	r25, Z+1	; 0x01
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <LCD_displayCharacter+0x27e>
    2912:	fe 01       	movw	r30, r28
    2914:	e7 5b       	subi	r30, 0xB7	; 183
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291c:	de 01       	movw	r26, r28
    291e:	a5 5b       	subi	r26, 0xB5	; 181
    2920:	bf 4f       	sbci	r27, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	e5 5b       	subi	r30, 0xB5	; 181
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	11 96       	adiw	r26, 0x01	; 1
    2930:	9c 93       	st	X, r25
    2932:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2934:	fe 01       	movw	r30, r28
    2936:	e5 5b       	subi	r30, 0xB5	; 181
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	d1 f6       	brne	.-76     	; 0x28f6 <LCD_displayCharacter+0x266>
    2942:	27 c0       	rjmp	.+78     	; 0x2992 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	8e 01       	movw	r16, r28
    2946:	05 5b       	subi	r16, 0xB5	; 181
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	e3 5b       	subi	r30, 0xB3	; 179
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	f8 01       	movw	r30, r16
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	80 83       	st	Z, r24
    2966:	de 01       	movw	r26, r28
    2968:	a9 5b       	subi	r26, 0xB9	; 185
    296a:	bf 4f       	sbci	r27, 0xFF	; 255
    296c:	fe 01       	movw	r30, r28
    296e:	e5 5b       	subi	r30, 0xB5	; 181
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	8d 93       	st	X+, r24
    2978:	9c 93       	st	X, r25
    297a:	fe 01       	movw	r30, r28
    297c:	e9 5b       	subi	r30, 0xB9	; 185
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <LCD_displayCharacter+0x2f4>
    2988:	fe 01       	movw	r30, r28
    298a:	e9 5b       	subi	r30, 0xB9	; 185
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2992:	fe 01       	movw	r30, r28
    2994:	ed 59       	subi	r30, 0x9D	; 157
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	80 71       	andi	r24, 0x10	; 16
    29a0:	90 70       	andi	r25, 0x00	; 0
    29a2:	95 95       	asr	r25
    29a4:	87 95       	ror	r24
    29a6:	95 95       	asr	r25
    29a8:	87 95       	ror	r24
    29aa:	95 95       	asr	r25
    29ac:	87 95       	ror	r24
    29ae:	95 95       	asr	r25
    29b0:	87 95       	ror	r24
    29b2:	98 2f       	mov	r25, r24
    29b4:	83 e0       	ldi	r24, 0x03	; 3
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	49 2f       	mov	r20, r25
    29ba:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 59       	subi	r30, 0x9D	; 157
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	80 72       	andi	r24, 0x20	; 32
    29cc:	90 70       	andi	r25, 0x00	; 0
    29ce:	95 95       	asr	r25
    29d0:	87 95       	ror	r24
    29d2:	95 95       	asr	r25
    29d4:	87 95       	ror	r24
    29d6:	95 95       	asr	r25
    29d8:	87 95       	ror	r24
    29da:	95 95       	asr	r25
    29dc:	87 95       	ror	r24
    29de:	95 95       	asr	r25
    29e0:	87 95       	ror	r24
    29e2:	98 2f       	mov	r25, r24
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	49 2f       	mov	r20, r25
    29ea:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    29ee:	fe 01       	movw	r30, r28
    29f0:	ed 59       	subi	r30, 0x9D	; 157
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	88 2f       	mov	r24, r24
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	80 74       	andi	r24, 0x40	; 64
    29fc:	90 70       	andi	r25, 0x00	; 0
    29fe:	08 2e       	mov	r0, r24
    2a00:	89 2f       	mov	r24, r25
    2a02:	00 0c       	add	r0, r0
    2a04:	88 1f       	adc	r24, r24
    2a06:	99 0b       	sbc	r25, r25
    2a08:	00 0c       	add	r0, r0
    2a0a:	88 1f       	adc	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	98 2f       	mov	r25, r24
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	62 e0       	ldi	r22, 0x02	; 2
    2a14:	49 2f       	mov	r20, r25
    2a16:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ed 59       	subi	r30, 0x9D	; 157
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	98 2f       	mov	r25, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	99 27       	eor	r25, r25
    2a28:	99 1f       	adc	r25, r25
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	63 e0       	ldi	r22, 0x03	; 3
    2a2e:	49 2f       	mov	r20, r25
    2a30:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2a34:	fe 01       	movw	r30, r28
    2a36:	ed 5b       	subi	r30, 0xBD	; 189
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e8       	ldi	r26, 0x80	; 128
    2a40:	bf e3       	ldi	r27, 0x3F	; 63
    2a42:	80 83       	st	Z, r24
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	a2 83       	std	Z+2, r26	; 0x02
    2a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	01 5c       	subi	r16, 0xC1	; 193
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	fe 01       	movw	r30, r28
    2a52:	ed 5b       	subi	r30, 0xBD	; 189
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a e7       	ldi	r20, 0x7A	; 122
    2a64:	53 e4       	ldi	r21, 0x43	; 67
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	f8 01       	movw	r30, r16
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ff 96       	adiw	r30, 0x3f	; 63
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	2c f4       	brge	.+10     	; 0x2a9e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9e af       	std	Y+62, r25	; 0x3e
    2a9a:	8d af       	std	Y+61, r24	; 0x3d
    2a9c:	46 c0       	rjmp	.+140    	; 0x2b2a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ff 96       	adiw	r30, 0x3f	; 63
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	64 f5       	brge	.+88     	; 0x2b12 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	fe 01       	movw	r30, r28
    2abc:	ed 5b       	subi	r30, 0xBD	; 189
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	60 81       	ld	r22, Z
    2ac2:	71 81       	ldd	r23, Z+1	; 0x01
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e2       	ldi	r20, 0x20	; 32
    2ace:	51 e4       	ldi	r21, 0x41	; 65
    2ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	bc 01       	movw	r22, r24
    2ada:	cd 01       	movw	r24, r26
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e af       	std	Y+62, r25	; 0x3e
    2ae6:	8d af       	std	Y+61, r24	; 0x3d
    2ae8:	0f c0       	rjmp	.+30     	; 0x2b08 <LCD_displayCharacter+0x478>
    2aea:	89 e1       	ldi	r24, 0x19	; 25
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9c af       	std	Y+60, r25	; 0x3c
    2af0:	8b af       	std	Y+59, r24	; 0x3b
    2af2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2af4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <LCD_displayCharacter+0x466>
    2afa:	9c af       	std	Y+60, r25	; 0x3c
    2afc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	9e af       	std	Y+62, r25	; 0x3e
    2b06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	69 f7       	brne	.-38     	; 0x2aea <LCD_displayCharacter+0x45a>
    2b10:	16 c0       	rjmp	.+44     	; 0x2b3e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b12:	fe 01       	movw	r30, r28
    2b14:	ff 96       	adiw	r30, 0x3f	; 63
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e af       	std	Y+62, r25	; 0x3e
    2b28:	8d af       	std	Y+61, r24	; 0x3d
    2b2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b2e:	9a af       	std	Y+58, r25	; 0x3a
    2b30:	89 af       	std	Y+57, r24	; 0x39
    2b32:	89 ad       	ldd	r24, Y+57	; 0x39
    2b34:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_displayCharacter+0x4a6>
    2b3a:	9a af       	std	Y+58, r25	; 0x3a
    2b3c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b3e:	83 e0       	ldi	r24, 0x03	; 3
    2b40:	65 e0       	ldi	r22, 0x05	; 5
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e8       	ldi	r26, 0x80	; 128
    2b4e:	bf e3       	ldi	r27, 0x3F	; 63
    2b50:	8d ab       	std	Y+53, r24	; 0x35
    2b52:	9e ab       	std	Y+54, r25	; 0x36
    2b54:	af ab       	std	Y+55, r26	; 0x37
    2b56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b58:	6d a9       	ldd	r22, Y+53	; 0x35
    2b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a e7       	ldi	r20, 0x7A	; 122
    2b66:	53 e4       	ldi	r21, 0x43	; 67
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	89 ab       	std	Y+49, r24	; 0x31
    2b72:	9a ab       	std	Y+50, r25	; 0x32
    2b74:	ab ab       	std	Y+51, r26	; 0x33
    2b76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b78:	69 a9       	ldd	r22, Y+49	; 0x31
    2b7a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b7c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b7e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	98 ab       	std	Y+48, r25	; 0x30
    2b96:	8f a7       	std	Y+47, r24	; 0x2f
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2b9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bae:	18 16       	cp	r1, r24
    2bb0:	4c f5       	brge	.+82     	; 0x2c04 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bb4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bb6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bb8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	98 ab       	std	Y+48, r25	; 0x30
    2bd8:	8f a7       	std	Y+47, r24	; 0x2f
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <LCD_displayCharacter+0x56a>
    2bdc:	89 e1       	ldi	r24, 0x19	; 25
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9e a7       	std	Y+46, r25	; 0x2e
    2be2:	8d a7       	std	Y+45, r24	; 0x2d
    2be4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2be6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_displayCharacter+0x558>
    2bec:	9e a7       	std	Y+46, r25	; 0x2e
    2bee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	98 ab       	std	Y+48, r25	; 0x30
    2bf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <LCD_displayCharacter+0x54c>
    2c02:	14 c0       	rjmp	.+40     	; 0x2c2c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	69 a9       	ldd	r22, Y+49	; 0x31
    2c06:	7a a9       	ldd	r23, Y+50	; 0x32
    2c08:	8b a9       	ldd	r24, Y+51	; 0x33
    2c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	98 ab       	std	Y+48, r25	; 0x30
    2c16:	8f a7       	std	Y+47, r24	; 0x2f
    2c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c1c:	9c a7       	std	Y+44, r25	; 0x2c
    2c1e:	8b a7       	std	Y+43, r24	; 0x2b
    2c20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <LCD_displayCharacter+0x594>
    2c28:	9c a7       	std	Y+44, r25	; 0x2c
    2c2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	65 e0       	ldi	r22, 0x05	; 5
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e8       	ldi	r26, 0x80	; 128
    2c3c:	bf e3       	ldi	r27, 0x3F	; 63
    2c3e:	8f a3       	std	Y+39, r24	; 0x27
    2c40:	98 a7       	std	Y+40, r25	; 0x28
    2c42:	a9 a7       	std	Y+41, r26	; 0x29
    2c44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	6f a1       	ldd	r22, Y+39	; 0x27
    2c48:	78 a5       	ldd	r23, Y+40	; 0x28
    2c4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a e7       	ldi	r20, 0x7A	; 122
    2c54:	53 e4       	ldi	r21, 0x43	; 67
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	8b a3       	std	Y+35, r24	; 0x23
    2c60:	9c a3       	std	Y+36, r25	; 0x24
    2c62:	ad a3       	std	Y+37, r26	; 0x25
    2c64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c66:	6b a1       	ldd	r22, Y+35	; 0x23
    2c68:	7c a1       	ldd	r23, Y+36	; 0x24
    2c6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9a a3       	std	Y+34, r25	; 0x22
    2c84:	89 a3       	std	Y+33, r24	; 0x21
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2c88:	6b a1       	ldd	r22, Y+35	; 0x23
    2c8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9a a3       	std	Y+34, r25	; 0x22
    2cc6:	89 a3       	std	Y+33, r24	; 0x21
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <LCD_displayCharacter+0x658>
    2cca:	89 e1       	ldi	r24, 0x19	; 25
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	98 a3       	std	Y+32, r25	; 0x20
    2cd0:	8f 8f       	std	Y+31, r24	; 0x1f
    2cd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cd4:	98 a1       	ldd	r25, Y+32	; 0x20
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_displayCharacter+0x646>
    2cda:	98 a3       	std	Y+32, r25	; 0x20
    2cdc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	9a a3       	std	Y+34, r25	; 0x22
    2ce6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cea:	9a a1       	ldd	r25, Y+34	; 0x22
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <LCD_displayCharacter+0x63a>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9a a3       	std	Y+34, r25	; 0x22
    2d04:	89 a3       	std	Y+33, r24	; 0x21
    2d06:	89 a1       	ldd	r24, Y+33	; 0x21
    2d08:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2d0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <LCD_displayCharacter+0x682>
    2d16:	9e 8f       	std	Y+30, r25	; 0x1e
    2d18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ed 59       	subi	r30, 0x9D	; 157
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 81       	ld	r24, Z
    2d22:	98 2f       	mov	r25, r24
    2d24:	91 70       	andi	r25, 0x01	; 1
    2d26:	83 e0       	ldi	r24, 0x03	; 3
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	49 2f       	mov	r20, r25
    2d2c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2d30:	fe 01       	movw	r30, r28
    2d32:	ed 59       	subi	r30, 0x9D	; 157
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	88 2f       	mov	r24, r24
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	82 70       	andi	r24, 0x02	; 2
    2d3e:	90 70       	andi	r25, 0x00	; 0
    2d40:	95 95       	asr	r25
    2d42:	87 95       	ror	r24
    2d44:	98 2f       	mov	r25, r24
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	49 2f       	mov	r20, r25
    2d4c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2d50:	fe 01       	movw	r30, r28
    2d52:	ed 59       	subi	r30, 0x9D	; 157
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	84 70       	andi	r24, 0x04	; 4
    2d5e:	90 70       	andi	r25, 0x00	; 0
    2d60:	95 95       	asr	r25
    2d62:	87 95       	ror	r24
    2d64:	95 95       	asr	r25
    2d66:	87 95       	ror	r24
    2d68:	98 2f       	mov	r25, r24
    2d6a:	83 e0       	ldi	r24, 0x03	; 3
    2d6c:	62 e0       	ldi	r22, 0x02	; 2
    2d6e:	49 2f       	mov	r20, r25
    2d70:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2d74:	fe 01       	movw	r30, r28
    2d76:	ed 59       	subi	r30, 0x9D	; 157
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	88 70       	andi	r24, 0x08	; 8
    2d82:	90 70       	andi	r25, 0x00	; 0
    2d84:	95 95       	asr	r25
    2d86:	87 95       	ror	r24
    2d88:	95 95       	asr	r25
    2d8a:	87 95       	ror	r24
    2d8c:	95 95       	asr	r25
    2d8e:	87 95       	ror	r24
    2d90:	98 2f       	mov	r25, r24
    2d92:	83 e0       	ldi	r24, 0x03	; 3
    2d94:	63 e0       	ldi	r22, 0x03	; 3
    2d96:	49 2f       	mov	r20, r25
    2d98:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e8       	ldi	r26, 0x80	; 128
    2da2:	bf e3       	ldi	r27, 0x3F	; 63
    2da4:	89 8f       	std	Y+25, r24	; 0x19
    2da6:	9a 8f       	std	Y+26, r25	; 0x1a
    2da8:	ab 8f       	std	Y+27, r26	; 0x1b
    2daa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	69 8d       	ldd	r22, Y+25	; 0x19
    2dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	53 e4       	ldi	r21, 0x43	; 67
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8d 8b       	std	Y+21, r24	; 0x15
    2dc6:	9e 8b       	std	Y+22, r25	; 0x16
    2dc8:	af 8b       	std	Y+23, r26	; 0x17
    2dca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c 8b       	std	Y+20, r25	; 0x14
    2dea:	8b 8b       	std	Y+19, r24	; 0x13
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2dee:	6d 89       	ldd	r22, Y+21	; 0x15
    2df0:	7e 89       	ldd	r23, Y+22	; 0x16
    2df2:	8f 89       	ldd	r24, Y+23	; 0x17
    2df4:	98 8d       	ldd	r25, Y+24	; 0x18
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	69 8d       	ldd	r22, Y+25	; 0x19
    2e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9c 8b       	std	Y+20, r25	; 0x14
    2e2c:	8b 8b       	std	Y+19, r24	; 0x13
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <LCD_displayCharacter+0x7be>
    2e30:	89 e1       	ldi	r24, 0x19	; 25
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9a 8b       	std	Y+18, r25	; 0x12
    2e36:	89 8b       	std	Y+17, r24	; 0x11
    2e38:	89 89       	ldd	r24, Y+17	; 0x11
    2e3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_displayCharacter+0x7ac>
    2e40:	9a 8b       	std	Y+18, r25	; 0x12
    2e42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8b 89       	ldd	r24, Y+19	; 0x13
    2e46:	9c 89       	ldd	r25, Y+20	; 0x14
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	9c 8b       	std	Y+20, r25	; 0x14
    2e4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	9c 89       	ldd	r25, Y+20	; 0x14
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <LCD_displayCharacter+0x7a0>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	98 8b       	std	Y+16, r25	; 0x10
    2e72:	8f 87       	std	Y+15, r24	; 0x0f
    2e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e76:	98 89       	ldd	r25, Y+16	; 0x10
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_displayCharacter+0x7e8>
    2e7c:	98 8b       	std	Y+16, r25	; 0x10
    2e7e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e80:	83 e0       	ldi	r24, 0x03	; 3
    2e82:	65 e0       	ldi	r22, 0x05	; 5
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e8       	ldi	r26, 0x80	; 128
    2e90:	bf e3       	ldi	r27, 0x3F	; 63
    2e92:	8b 87       	std	Y+11, r24	; 0x0b
    2e94:	9c 87       	std	Y+12, r25	; 0x0c
    2e96:	ad 87       	std	Y+13, r26	; 0x0d
    2e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
    2eb4:	98 87       	std	Y+8, r25	; 0x08
    2eb6:	a9 87       	std	Y+9, r26	; 0x09
    2eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2edc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ede:	78 85       	ldd	r23, Y+8	; 0x08
    2ee0:	89 85       	ldd	r24, Y+9	; 0x09
    2ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <LCD_displayCharacter+0x8ac>
    2f1e:	89 e1       	ldi	r24, 0x19	; 25
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_displayCharacter+0x89a>
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <LCD_displayCharacter+0x88e>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <LCD_displayCharacter+0x8d6>
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f6e:	cd 59       	subi	r28, 0x9D	; 157
    2f70:	df 4f       	sbci	r29, 0xFF	; 255
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	08 95       	ret

00002f86 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <LCD_displayString+0x6>
    2f8c:	0f 92       	push	r0
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	9b 83       	std	Y+3, r25	; 0x03
    2f94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f96:	19 82       	std	Y+1, r1	; 0x01
    2f98:	0e c0       	rjmp	.+28     	; 0x2fb6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	e2 0f       	add	r30, r18
    2fa8:	f3 1f       	adc	r31, r19
    2faa:	80 81       	ld	r24, Z
    2fac:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_displayCharacter>
		i++;
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	8f 5f       	subi	r24, 0xFF	; 255
    2fb4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	e2 0f       	add	r30, r18
    2fc4:	f3 1f       	adc	r31, r19
    2fc6:	80 81       	ld	r24, Z
    2fc8:	88 23       	and	r24, r24
    2fca:	39 f7       	brne	.-50     	; 0x2f9a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <LCD_moveCursor+0x6>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <LCD_moveCursor+0x8>
    2fe0:	0f 92       	push	r0
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
    2fe8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	3d 83       	std	Y+5, r19	; 0x05
    2ff2:	2c 83       	std	Y+4, r18	; 0x04
    2ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff8:	81 30       	cpi	r24, 0x01	; 1
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	c1 f0       	breq	.+48     	; 0x302e <LCD_moveCursor+0x56>
    2ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    3000:	3d 81       	ldd	r19, Y+5	; 0x05
    3002:	22 30       	cpi	r18, 0x02	; 2
    3004:	31 05       	cpc	r19, r1
    3006:	2c f4       	brge	.+10     	; 0x3012 <LCD_moveCursor+0x3a>
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	9d 81       	ldd	r25, Y+5	; 0x05
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	61 f0       	breq	.+24     	; 0x3028 <LCD_moveCursor+0x50>
    3010:	19 c0       	rjmp	.+50     	; 0x3044 <LCD_moveCursor+0x6c>
    3012:	2c 81       	ldd	r18, Y+4	; 0x04
    3014:	3d 81       	ldd	r19, Y+5	; 0x05
    3016:	22 30       	cpi	r18, 0x02	; 2
    3018:	31 05       	cpc	r19, r1
    301a:	69 f0       	breq	.+26     	; 0x3036 <LCD_moveCursor+0x5e>
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	9d 81       	ldd	r25, Y+5	; 0x05
    3020:	83 30       	cpi	r24, 0x03	; 3
    3022:	91 05       	cpc	r25, r1
    3024:	61 f0       	breq	.+24     	; 0x303e <LCD_moveCursor+0x66>
    3026:	0e c0       	rjmp	.+28     	; 0x3044 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	0b c0       	rjmp	.+22     	; 0x3044 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	80 5c       	subi	r24, 0xC0	; 192
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	07 c0       	rjmp	.+14     	; 0x3044 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	80 5f       	subi	r24, 0xF0	; 240
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	03 c0       	rjmp	.+6      	; 0x3044 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	80 5b       	subi	r24, 0xB0	; 176
    3042:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	80 68       	ori	r24, 0x80	; 128
    3048:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_sendCommand>
}
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	00 d0       	rcall	.+0      	; 0x3062 <LCD_displayStringRowColumn+0x6>
    3062:	00 d0       	rcall	.+0      	; 0x3064 <LCD_displayStringRowColumn+0x8>
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	89 83       	std	Y+1, r24	; 0x01
    306a:	6a 83       	std	Y+2, r22	; 0x02
    306c:	5c 83       	std	Y+4, r21	; 0x04
    306e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	6a 81       	ldd	r22, Y+2	; 0x02
    3074:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	9c 81       	ldd	r25, Y+4	; 0x04
    307c:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
}
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	cf 91       	pop	r28
    308a:	df 91       	pop	r29
    308c:	08 95       	ret

0000308e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int number)
{
    308e:	ef 92       	push	r14
    3090:	ff 92       	push	r15
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	00 d0       	rcall	.+0      	; 0x309c <LCD_intgerToString+0xe>
    309c:	00 d0       	rcall	.+0      	; 0x309e <LCD_intgerToString+0x10>
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <LCD_intgerToString+0x12>
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
	if (number == 0) {
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	21 f4       	brne	.+8      	; 0x30b8 <LCD_intgerToString+0x2a>
		LCD_displayCharacter('0');
    30b0:	80 e3       	ldi	r24, 0x30	; 48
    30b2:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_displayCharacter>
    30b6:	73 c0       	rjmp	.+230    	; 0x319e <LCD_intgerToString+0x110>
		return;
	}
	else if (number<0) {
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	99 23       	and	r25, r25
    30be:	54 f4       	brge	.+20     	; 0x30d4 <LCD_intgerToString+0x46>
		LCD_displayCharacter('-');
    30c0:	8d e2       	ldi	r24, 0x2D	; 45
    30c2:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_displayCharacter>
		number*=-1;
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ca:	90 95       	com	r25
    30cc:	81 95       	neg	r24
    30ce:	9f 4f       	sbci	r25, 0xFF	; 255
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05

	}
	uint32 reservedNumber=1;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a0 e0       	ldi	r26, 0x00	; 0
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	ab 83       	std	Y+3, r26	; 0x03
    30e2:	bc 83       	std	Y+4, r27	; 0x04
    30e4:	2b c0       	rjmp	.+86     	; 0x313c <LCD_intgerToString+0xae>
	while (number != 0) {
		reservedNumber = (reservedNumber*10) + (number%10);
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	ab 81       	ldd	r26, Y+3	; 0x03
    30ec:	bc 81       	ldd	r27, Y+4	; 0x04
    30ee:	2a e0       	ldi	r18, 0x0A	; 10
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e0       	ldi	r20, 0x00	; 0
    30f4:	50 e0       	ldi	r21, 0x00	; 0
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 ef 22 	call	0x45de	; 0x45de <__mulsi3>
    30fe:	7b 01       	movw	r14, r22
    3100:	8c 01       	movw	r16, r24
    3102:	8d 81       	ldd	r24, Y+5	; 0x05
    3104:	9e 81       	ldd	r25, Y+6	; 0x06
    3106:	2a e0       	ldi	r18, 0x0A	; 10
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	b9 01       	movw	r22, r18
    310c:	0e 94 22 23 	call	0x4644	; 0x4644 <__divmodhi4>
    3110:	aa 27       	eor	r26, r26
    3112:	97 fd       	sbrc	r25, 7
    3114:	a0 95       	com	r26
    3116:	ba 2f       	mov	r27, r26
    3118:	8e 0d       	add	r24, r14
    311a:	9f 1d       	adc	r25, r15
    311c:	a0 1f       	adc	r26, r16
    311e:	b1 1f       	adc	r27, r17
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	ab 83       	std	Y+3, r26	; 0x03
    3126:	bc 83       	std	Y+4, r27	; 0x04
		number/=10;
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	2a e0       	ldi	r18, 0x0A	; 10
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	b9 01       	movw	r22, r18
    3132:	0e 94 22 23 	call	0x4644	; 0x4644 <__divmodhi4>
    3136:	cb 01       	movw	r24, r22
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	8d 83       	std	Y+5, r24	; 0x05
		LCD_displayCharacter('-');
		number*=-1;

	}
	uint32 reservedNumber=1;
	while (number != 0) {
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	89 f6       	brne	.-94     	; 0x30e6 <LCD_intgerToString+0x58>
    3144:	23 c0       	rjmp	.+70     	; 0x318c <LCD_intgerToString+0xfe>
		reservedNumber = (reservedNumber*10) + (number%10);
		number/=10;
	}
	while (reservedNumber!=1) {
		LCD_displayCharacter((reservedNumber%10)+'0');
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	9a 81       	ldd	r25, Y+2	; 0x02
    314a:	ab 81       	ldd	r26, Y+3	; 0x03
    314c:	bc 81       	ldd	r27, Y+4	; 0x04
    314e:	2a e0       	ldi	r18, 0x0A	; 10
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 35 23 	call	0x466a	; 0x466a <__udivmodsi4>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	80 5d       	subi	r24, 0xD0	; 208
    3164:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_displayCharacter>
		reservedNumber/=10;
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	9a 81       	ldd	r25, Y+2	; 0x02
    316c:	ab 81       	ldd	r26, Y+3	; 0x03
    316e:	bc 81       	ldd	r27, Y+4	; 0x04
    3170:	2a e0       	ldi	r18, 0x0A	; 10
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 35 23 	call	0x466a	; 0x466a <__udivmodsi4>
    3180:	da 01       	movw	r26, r20
    3182:	c9 01       	movw	r24, r18
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	9a 83       	std	Y+2, r25	; 0x02
    3188:	ab 83       	std	Y+3, r26	; 0x03
    318a:	bc 83       	std	Y+4, r27	; 0x04
	uint32 reservedNumber=1;
	while (number != 0) {
		reservedNumber = (reservedNumber*10) + (number%10);
		number/=10;
	}
	while (reservedNumber!=1) {
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	ab 81       	ldd	r26, Y+3	; 0x03
    3192:	bc 81       	ldd	r27, Y+4	; 0x04
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	91 05       	cpc	r25, r1
    3198:	a1 05       	cpc	r26, r1
    319a:	b1 05       	cpc	r27, r1
    319c:	a1 f6       	brne	.-88     	; 0x3146 <LCD_intgerToString+0xb8>
		LCD_displayCharacter((reservedNumber%10)+'0');
		reservedNumber/=10;
	}
}
    319e:	26 96       	adiw	r28, 0x06	; 6
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	1f 91       	pop	r17
    31b0:	0f 91       	pop	r16
    31b2:	ff 90       	pop	r15
    31b4:	ef 90       	pop	r14
    31b6:	08 95       	ret

000031b8 <LCD_floatToString>:
/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float data)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	64 97       	sbiw	r28, 0x14	; 20
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	69 8b       	std	Y+17, r22	; 0x11
    31ce:	7a 8b       	std	Y+18, r23	; 0x12
    31d0:	8b 8b       	std	Y+19, r24	; 0x13
    31d2:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	itoa((int)data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    31d4:	69 89       	ldd	r22, Y+17	; 0x11
    31d6:	7a 89       	ldd	r23, Y+18	; 0x12
    31d8:	8b 89       	ldd	r24, Y+19	; 0x13
    31da:	9c 89       	ldd	r25, Y+20	; 0x14
    31dc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	9e 01       	movw	r18, r28
    31e6:	2f 5f       	subi	r18, 0xFF	; 255
    31e8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ea:	b9 01       	movw	r22, r18
    31ec:	4a e0       	ldi	r20, 0x0A	; 10
    31ee:	50 e0       	ldi	r21, 0x00	; 0
    31f0:	0e 94 8e 23 	call	0x471c	; 0x471c <itoa>
	LCD_displayString(buff); /* Display the string */
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
	LCD_displayString(".");
    31fc:	80 e6       	ldi	r24, 0x60	; 96
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
	data -= (int)data;
    3204:	69 89       	ldd	r22, Y+17	; 0x11
    3206:	7a 89       	ldd	r23, Y+18	; 0x12
    3208:	8b 89       	ldd	r24, Y+19	; 0x13
    320a:	9c 89       	ldd	r25, Y+20	; 0x14
    320c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	aa 27       	eor	r26, r26
    3216:	97 fd       	sbrc	r25, 7
    3218:	a0 95       	com	r26
    321a:	ba 2f       	mov	r27, r26
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3224:	9b 01       	movw	r18, r22
    3226:	ac 01       	movw	r20, r24
    3228:	69 89       	ldd	r22, Y+17	; 0x11
    322a:	7a 89       	ldd	r23, Y+18	; 0x12
    322c:	8b 89       	ldd	r24, Y+19	; 0x13
    322e:	9c 89       	ldd	r25, Y+20	; 0x14
    3230:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	89 8b       	std	Y+17, r24	; 0x11
    323a:	9a 8b       	std	Y+18, r25	; 0x12
    323c:	ab 8b       	std	Y+19, r26	; 0x13
    323e:	bc 8b       	std	Y+20, r27	; 0x14
	data*=1000;
    3240:	69 89       	ldd	r22, Y+17	; 0x11
    3242:	7a 89       	ldd	r23, Y+18	; 0x12
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4a e7       	ldi	r20, 0x7A	; 122
    324e:	54 e4       	ldi	r21, 0x44	; 68
    3250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	89 8b       	std	Y+17, r24	; 0x11
    325a:	9a 8b       	std	Y+18, r25	; 0x12
    325c:	ab 8b       	std	Y+19, r26	; 0x13
    325e:	bc 8b       	std	Y+20, r27	; 0x14
	itoa((int)data,buff,10);
    3260:	69 89       	ldd	r22, Y+17	; 0x11
    3262:	7a 89       	ldd	r23, Y+18	; 0x12
    3264:	8b 89       	ldd	r24, Y+19	; 0x13
    3266:	9c 89       	ldd	r25, Y+20	; 0x14
    3268:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9e 01       	movw	r18, r28
    3272:	2f 5f       	subi	r18, 0xFF	; 255
    3274:	3f 4f       	sbci	r19, 0xFF	; 255
    3276:	b9 01       	movw	r22, r18
    3278:	4a e0       	ldi	r20, 0x0A	; 10
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	0e 94 8e 23 	call	0x471c	; 0x471c <itoa>
	LCD_displayString(buff);
    3280:	ce 01       	movw	r24, r28
    3282:	01 96       	adiw	r24, 0x01	; 1
    3284:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>

}
    3288:	64 96       	adiw	r28, 0x14	; 20
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <LCD_sendCommand>
}
    32a8:	cf 91       	pop	r28
    32aa:	df 91       	pop	r29
    32ac:	08 95       	ret

000032ae <ACVOLTMETER_get_max>:
 * This function samples the ADC multiple times and returns the maximum value
 * read, which represents the peak AC voltage.
 *
 * @return uint16 The maximum ADC value read.
 */
uint16 ACVOLTMETER_get_max(void) {
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	6e 97       	sbiw	r28, 0x1e	; 30
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	cd bf       	out	0x3d, r28	; 61
    uint16 max_v = 0;
    32c2:	1c 8e       	std	Y+28, r1	; 0x1c
    32c4:	1b 8e       	std	Y+27, r1	; 0x1b
    for (uint16 i = 0; i < 250; i++) {
    32c6:	1a 8e       	std	Y+26, r1	; 0x1a
    32c8:	19 8e       	std	Y+25, r1	; 0x19
    32ca:	d4 c0       	rjmp	.+424    	; 0x3474 <ACVOLTMETER_get_max+0x1c6>
        uint16 r;
        while (!ADC_readChannel(&r)) {}
    32cc:	ce 01       	movw	r24, r28
    32ce:	4d 96       	adiw	r24, 0x1d	; 29
    32d0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <ADC_readChannel>
    32d4:	88 23       	and	r24, r24
    32d6:	d1 f3       	breq	.-12     	; 0x32cc <ACVOLTMETER_get_max+0x1e>
        if (max_v < r) max_v = r;
    32d8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    32da:	3e 8d       	ldd	r19, Y+30	; 0x1e
    32dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32e0:	82 17       	cp	r24, r18
    32e2:	93 07       	cpc	r25, r19
    32e4:	20 f4       	brcc	.+8      	; 0x32ee <ACVOLTMETER_get_max+0x40>
    32e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32ea:	9c 8f       	std	Y+28, r25	; 0x1c
    32ec:	8b 8f       	std	Y+27, r24	; 0x1b
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a0 ea       	ldi	r26, 0xA0	; 160
    32f4:	b1 e4       	ldi	r27, 0x41	; 65
    32f6:	8d 8b       	std	Y+21, r24	; 0x15
    32f8:	9e 8b       	std	Y+22, r25	; 0x16
    32fa:	af 8b       	std	Y+23, r26	; 0x17
    32fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3300:	7e 89       	ldd	r23, Y+22	; 0x16
    3302:	8f 89       	ldd	r24, Y+23	; 0x17
    3304:	98 8d       	ldd	r25, Y+24	; 0x18
    3306:	2b ea       	ldi	r18, 0xAB	; 171
    3308:	3a ea       	ldi	r19, 0xAA	; 170
    330a:	4a ea       	ldi	r20, 0xAA	; 170
    330c:	5e e3       	ldi	r21, 0x3E	; 62
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	89 8b       	std	Y+17, r24	; 0x11
    3318:	9a 8b       	std	Y+18, r25	; 0x12
    331a:	ab 8b       	std	Y+19, r26	; 0x13
    331c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    331e:	69 89       	ldd	r22, Y+17	; 0x11
    3320:	7a 89       	ldd	r23, Y+18	; 0x12
    3322:	8b 89       	ldd	r24, Y+19	; 0x13
    3324:	9c 89       	ldd	r25, Y+20	; 0x14
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	1c f4       	brge	.+6      	; 0x333c <ACVOLTMETER_get_max+0x8e>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	88 8b       	std	Y+16, r24	; 0x10
    333a:	91 c0       	rjmp	.+290    	; 0x345e <ACVOLTMETER_get_max+0x1b0>
	else if (__tmp > 255)
    333c:	69 89       	ldd	r22, Y+17	; 0x11
    333e:	7a 89       	ldd	r23, Y+18	; 0x12
    3340:	8b 89       	ldd	r24, Y+19	; 0x13
    3342:	9c 89       	ldd	r25, Y+20	; 0x14
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	53 e4       	ldi	r21, 0x43	; 67
    334c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	0c f0       	brlt	.+2      	; 0x3356 <ACVOLTMETER_get_max+0xa8>
    3354:	7b c0       	rjmp	.+246    	; 0x344c <ACVOLTMETER_get_max+0x19e>
	{
		_delay_ms(__us / 1000.0);
    3356:	6d 89       	ldd	r22, Y+21	; 0x15
    3358:	7e 89       	ldd	r23, Y+22	; 0x16
    335a:	8f 89       	ldd	r24, Y+23	; 0x17
    335c:	98 8d       	ldd	r25, Y+24	; 0x18
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	4a e7       	ldi	r20, 0x7A	; 122
    3364:	54 e4       	ldi	r21, 0x44	; 68
    3366:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	8c 87       	std	Y+12, r24	; 0x0c
    3370:	9d 87       	std	Y+13, r25	; 0x0d
    3372:	ae 87       	std	Y+14, r26	; 0x0e
    3374:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	6c 85       	ldd	r22, Y+12	; 0x0c
    3378:	7d 85       	ldd	r23, Y+13	; 0x0d
    337a:	8e 85       	ldd	r24, Y+14	; 0x0e
    337c:	9f 85       	ldd	r25, Y+15	; 0x0f
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	4a e7       	ldi	r20, 0x7A	; 122
    3384:	53 e4       	ldi	r21, 0x43	; 67
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	88 87       	std	Y+8, r24	; 0x08
    3390:	99 87       	std	Y+9, r25	; 0x09
    3392:	aa 87       	std	Y+10, r26	; 0x0a
    3394:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3396:	68 85       	ldd	r22, Y+8	; 0x08
    3398:	79 85       	ldd	r23, Y+9	; 0x09
    339a:	8a 85       	ldd	r24, Y+10	; 0x0a
    339c:	9b 85       	ldd	r25, Y+11	; 0x0b
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <ACVOLTMETER_get_max+0x10a>
		__ticks = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9f 83       	std	Y+7, r25	; 0x07
    33b4:	8e 83       	std	Y+6, r24	; 0x06
    33b6:	3f c0       	rjmp	.+126    	; 0x3436 <ACVOLTMETER_get_max+0x188>
	else if (__tmp > 65535)
    33b8:	68 85       	ldd	r22, Y+8	; 0x08
    33ba:	79 85       	ldd	r23, Y+9	; 0x09
    33bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33be:	9b 85       	ldd	r25, Y+11	; 0x0b
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	3f ef       	ldi	r19, 0xFF	; 255
    33c4:	4f e7       	ldi	r20, 0x7F	; 127
    33c6:	57 e4       	ldi	r21, 0x47	; 71
    33c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33cc:	18 16       	cp	r1, r24
    33ce:	4c f5       	brge	.+82     	; 0x3422 <ACVOLTMETER_get_max+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    33d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    33d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    33d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e2       	ldi	r20, 0x20	; 32
    33de:	51 e4       	ldi	r21, 0x41	; 65
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9f 83       	std	Y+7, r25	; 0x07
    33f6:	8e 83       	std	Y+6, r24	; 0x06
    33f8:	0f c0       	rjmp	.+30     	; 0x3418 <ACVOLTMETER_get_max+0x16a>
    33fa:	89 e1       	ldi	r24, 0x19	; 25
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9d 83       	std	Y+5, r25	; 0x05
    3400:	8c 83       	std	Y+4, r24	; 0x04
    3402:	8c 81       	ldd	r24, Y+4	; 0x04
    3404:	9d 81       	ldd	r25, Y+5	; 0x05
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <ACVOLTMETER_get_max+0x158>
    340a:	9d 83       	std	Y+5, r25	; 0x05
    340c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340e:	8e 81       	ldd	r24, Y+6	; 0x06
    3410:	9f 81       	ldd	r25, Y+7	; 0x07
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	9f 83       	std	Y+7, r25	; 0x07
    3416:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	8e 81       	ldd	r24, Y+6	; 0x06
    341a:	9f 81       	ldd	r25, Y+7	; 0x07
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	69 f7       	brne	.-38     	; 0x33fa <ACVOLTMETER_get_max+0x14c>
    3420:	24 c0       	rjmp	.+72     	; 0x346a <ACVOLTMETER_get_max+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	68 85       	ldd	r22, Y+8	; 0x08
    3424:	79 85       	ldd	r23, Y+9	; 0x09
    3426:	8a 85       	ldd	r24, Y+10	; 0x0a
    3428:	9b 85       	ldd	r25, Y+11	; 0x0b
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9f 83       	std	Y+7, r25	; 0x07
    3434:	8e 83       	std	Y+6, r24	; 0x06
    3436:	8e 81       	ldd	r24, Y+6	; 0x06
    3438:	9f 81       	ldd	r25, Y+7	; 0x07
    343a:	9b 83       	std	Y+3, r25	; 0x03
    343c:	8a 83       	std	Y+2, r24	; 0x02
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <ACVOLTMETER_get_max+0x194>
    3446:	9b 83       	std	Y+3, r25	; 0x03
    3448:	8a 83       	std	Y+2, r24	; 0x02
    344a:	0f c0       	rjmp	.+30     	; 0x346a <ACVOLTMETER_get_max+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    344c:	69 89       	ldd	r22, Y+17	; 0x11
    344e:	7a 89       	ldd	r23, Y+18	; 0x12
    3450:	8b 89       	ldd	r24, Y+19	; 0x13
    3452:	9c 89       	ldd	r25, Y+20	; 0x14
    3454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	88 8b       	std	Y+16, r24	; 0x10
    345e:	88 89       	ldd	r24, Y+16	; 0x10
    3460:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	8a 95       	dec	r24
    3466:	f1 f7       	brne	.-4      	; 0x3464 <ACVOLTMETER_get_max+0x1b6>
    3468:	89 83       	std	Y+1, r24	; 0x01
 *
 * @return uint16 The maximum ADC value read.
 */
uint16 ACVOLTMETER_get_max(void) {
    uint16 max_v = 0;
    for (uint16 i = 0; i < 250; i++) {
    346a:	89 8d       	ldd	r24, Y+25	; 0x19
    346c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	9a 8f       	std	Y+26, r25	; 0x1a
    3472:	89 8f       	std	Y+25, r24	; 0x19
    3474:	89 8d       	ldd	r24, Y+25	; 0x19
    3476:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3478:	8a 3f       	cpi	r24, 0xFA	; 250
    347a:	91 05       	cpc	r25, r1
    347c:	08 f4       	brcc	.+2      	; 0x3480 <ACVOLTMETER_get_max+0x1d2>
    347e:	26 cf       	rjmp	.-436    	; 0x32cc <ACVOLTMETER_get_max+0x1e>
        uint16 r;
        while (!ADC_readChannel(&r)) {}
        if (max_v < r) max_v = r;
        _delay_us(20);
    }
    return max_v;
    3480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3482:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
    3484:	6e 96       	adiw	r28, 0x1e	; 30
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	cf 91       	pop	r28
    3492:	df 91       	pop	r29
    3494:	08 95       	ret

00003496 <DCVOLTMETER_get_max>:
 * This function samples the ADC multiple times and returns the maximum value
 * read, which represents the DC voltage.
 *
 * @return uint16 The maximum ADC value read.
 */
uint16 DCVOLTMETER_get_max(void) {
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	6e 97       	sbiw	r28, 0x1e	; 30
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    uint16 max_v = 0;
    34aa:	1c 8e       	std	Y+28, r1	; 0x1c
    34ac:	1b 8e       	std	Y+27, r1	; 0x1b
    for (uint16 i = 0; i < 250; i++) {
    34ae:	1a 8e       	std	Y+26, r1	; 0x1a
    34b0:	19 8e       	std	Y+25, r1	; 0x19
    34b2:	d4 c0       	rjmp	.+424    	; 0x365c <DCVOLTMETER_get_max+0x1c6>
        uint16 r;
        while (!ADC_readChannel(&r)) {}
    34b4:	ce 01       	movw	r24, r28
    34b6:	4d 96       	adiw	r24, 0x1d	; 29
    34b8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <ADC_readChannel>
    34bc:	88 23       	and	r24, r24
    34be:	d1 f3       	breq	.-12     	; 0x34b4 <DCVOLTMETER_get_max+0x1e>
        if (max_v < r) max_v = r;
    34c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    34c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    34c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34c8:	82 17       	cp	r24, r18
    34ca:	93 07       	cpc	r25, r19
    34cc:	20 f4       	brcc	.+8      	; 0x34d6 <DCVOLTMETER_get_max+0x40>
    34ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d2:	9c 8f       	std	Y+28, r25	; 0x1c
    34d4:	8b 8f       	std	Y+27, r24	; 0x1b
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	a0 ea       	ldi	r26, 0xA0	; 160
    34dc:	b1 e4       	ldi	r27, 0x41	; 65
    34de:	8d 8b       	std	Y+21, r24	; 0x15
    34e0:	9e 8b       	std	Y+22, r25	; 0x16
    34e2:	af 8b       	std	Y+23, r26	; 0x17
    34e4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34e6:	6d 89       	ldd	r22, Y+21	; 0x15
    34e8:	7e 89       	ldd	r23, Y+22	; 0x16
    34ea:	8f 89       	ldd	r24, Y+23	; 0x17
    34ec:	98 8d       	ldd	r25, Y+24	; 0x18
    34ee:	2b ea       	ldi	r18, 0xAB	; 171
    34f0:	3a ea       	ldi	r19, 0xAA	; 170
    34f2:	4a ea       	ldi	r20, 0xAA	; 170
    34f4:	5e e3       	ldi	r21, 0x3E	; 62
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	89 8b       	std	Y+17, r24	; 0x11
    3500:	9a 8b       	std	Y+18, r25	; 0x12
    3502:	ab 8b       	std	Y+19, r26	; 0x13
    3504:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3506:	69 89       	ldd	r22, Y+17	; 0x11
    3508:	7a 89       	ldd	r23, Y+18	; 0x12
    350a:	8b 89       	ldd	r24, Y+19	; 0x13
    350c:	9c 89       	ldd	r25, Y+20	; 0x14
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    351a:	88 23       	and	r24, r24
    351c:	1c f4       	brge	.+6      	; 0x3524 <DCVOLTMETER_get_max+0x8e>
		__ticks = 1;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	88 8b       	std	Y+16, r24	; 0x10
    3522:	91 c0       	rjmp	.+290    	; 0x3646 <DCVOLTMETER_get_max+0x1b0>
	else if (__tmp > 255)
    3524:	69 89       	ldd	r22, Y+17	; 0x11
    3526:	7a 89       	ldd	r23, Y+18	; 0x12
    3528:	8b 89       	ldd	r24, Y+19	; 0x13
    352a:	9c 89       	ldd	r25, Y+20	; 0x14
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4f e7       	ldi	r20, 0x7F	; 127
    3532:	53 e4       	ldi	r21, 0x43	; 67
    3534:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3538:	18 16       	cp	r1, r24
    353a:	0c f0       	brlt	.+2      	; 0x353e <DCVOLTMETER_get_max+0xa8>
    353c:	7b c0       	rjmp	.+246    	; 0x3634 <DCVOLTMETER_get_max+0x19e>
	{
		_delay_ms(__us / 1000.0);
    353e:	6d 89       	ldd	r22, Y+21	; 0x15
    3540:	7e 89       	ldd	r23, Y+22	; 0x16
    3542:	8f 89       	ldd	r24, Y+23	; 0x17
    3544:	98 8d       	ldd	r25, Y+24	; 0x18
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a e7       	ldi	r20, 0x7A	; 122
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	8c 87       	std	Y+12, r24	; 0x0c
    3558:	9d 87       	std	Y+13, r25	; 0x0d
    355a:	ae 87       	std	Y+14, r26	; 0x0e
    355c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3560:	7d 85       	ldd	r23, Y+13	; 0x0d
    3562:	8e 85       	ldd	r24, Y+14	; 0x0e
    3564:	9f 85       	ldd	r25, Y+15	; 0x0f
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	4a e7       	ldi	r20, 0x7A	; 122
    356c:	53 e4       	ldi	r21, 0x43	; 67
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	88 87       	std	Y+8, r24	; 0x08
    3578:	99 87       	std	Y+9, r25	; 0x09
    357a:	aa 87       	std	Y+10, r26	; 0x0a
    357c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    357e:	68 85       	ldd	r22, Y+8	; 0x08
    3580:	79 85       	ldd	r23, Y+9	; 0x09
    3582:	8a 85       	ldd	r24, Y+10	; 0x0a
    3584:	9b 85       	ldd	r25, Y+11	; 0x0b
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e8       	ldi	r20, 0x80	; 128
    358c:	5f e3       	ldi	r21, 0x3F	; 63
    358e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3592:	88 23       	and	r24, r24
    3594:	2c f4       	brge	.+10     	; 0x35a0 <DCVOLTMETER_get_max+0x10a>
		__ticks = 1;
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	9f 83       	std	Y+7, r25	; 0x07
    359c:	8e 83       	std	Y+6, r24	; 0x06
    359e:	3f c0       	rjmp	.+126    	; 0x361e <DCVOLTMETER_get_max+0x188>
	else if (__tmp > 65535)
    35a0:	68 85       	ldd	r22, Y+8	; 0x08
    35a2:	79 85       	ldd	r23, Y+9	; 0x09
    35a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	3f ef       	ldi	r19, 0xFF	; 255
    35ac:	4f e7       	ldi	r20, 0x7F	; 127
    35ae:	57 e4       	ldi	r21, 0x47	; 71
    35b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b4:	18 16       	cp	r1, r24
    35b6:	4c f5       	brge	.+82     	; 0x360a <DCVOLTMETER_get_max+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    35ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    35bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    35be:	9f 85       	ldd	r25, Y+15	; 0x0f
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	40 e2       	ldi	r20, 0x20	; 32
    35c6:	51 e4       	ldi	r21, 0x41	; 65
    35c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	bc 01       	movw	r22, r24
    35d2:	cd 01       	movw	r24, r26
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9f 83       	std	Y+7, r25	; 0x07
    35de:	8e 83       	std	Y+6, r24	; 0x06
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <DCVOLTMETER_get_max+0x16a>
    35e2:	89 e1       	ldi	r24, 0x19	; 25
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9d 83       	std	Y+5, r25	; 0x05
    35e8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ea:	8c 81       	ldd	r24, Y+4	; 0x04
    35ec:	9d 81       	ldd	r25, Y+5	; 0x05
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <DCVOLTMETER_get_max+0x158>
    35f2:	9d 83       	std	Y+5, r25	; 0x05
    35f4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f6:	8e 81       	ldd	r24, Y+6	; 0x06
    35f8:	9f 81       	ldd	r25, Y+7	; 0x07
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	9f 83       	std	Y+7, r25	; 0x07
    35fe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3600:	8e 81       	ldd	r24, Y+6	; 0x06
    3602:	9f 81       	ldd	r25, Y+7	; 0x07
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	69 f7       	brne	.-38     	; 0x35e2 <DCVOLTMETER_get_max+0x14c>
    3608:	24 c0       	rjmp	.+72     	; 0x3652 <DCVOLTMETER_get_max+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360a:	68 85       	ldd	r22, Y+8	; 0x08
    360c:	79 85       	ldd	r23, Y+9	; 0x09
    360e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3610:	9b 85       	ldd	r25, Y+11	; 0x0b
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9f 83       	std	Y+7, r25	; 0x07
    361c:	8e 83       	std	Y+6, r24	; 0x06
    361e:	8e 81       	ldd	r24, Y+6	; 0x06
    3620:	9f 81       	ldd	r25, Y+7	; 0x07
    3622:	9b 83       	std	Y+3, r25	; 0x03
    3624:	8a 83       	std	Y+2, r24	; 0x02
    3626:	8a 81       	ldd	r24, Y+2	; 0x02
    3628:	9b 81       	ldd	r25, Y+3	; 0x03
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	f1 f7       	brne	.-4      	; 0x362a <DCVOLTMETER_get_max+0x194>
    362e:	9b 83       	std	Y+3, r25	; 0x03
    3630:	8a 83       	std	Y+2, r24	; 0x02
    3632:	0f c0       	rjmp	.+30     	; 0x3652 <DCVOLTMETER_get_max+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3634:	69 89       	ldd	r22, Y+17	; 0x11
    3636:	7a 89       	ldd	r23, Y+18	; 0x12
    3638:	8b 89       	ldd	r24, Y+19	; 0x13
    363a:	9c 89       	ldd	r25, Y+20	; 0x14
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	88 8b       	std	Y+16, r24	; 0x10
    3646:	88 89       	ldd	r24, Y+16	; 0x10
    3648:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	8a 95       	dec	r24
    364e:	f1 f7       	brne	.-4      	; 0x364c <DCVOLTMETER_get_max+0x1b6>
    3650:	89 83       	std	Y+1, r24	; 0x01
 *
 * @return uint16 The maximum ADC value read.
 */
uint16 DCVOLTMETER_get_max(void) {
    uint16 max_v = 0;
    for (uint16 i = 0; i < 250; i++) {
    3652:	89 8d       	ldd	r24, Y+25	; 0x19
    3654:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3656:	01 96       	adiw	r24, 0x01	; 1
    3658:	9a 8f       	std	Y+26, r25	; 0x1a
    365a:	89 8f       	std	Y+25, r24	; 0x19
    365c:	89 8d       	ldd	r24, Y+25	; 0x19
    365e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3660:	8a 3f       	cpi	r24, 0xFA	; 250
    3662:	91 05       	cpc	r25, r1
    3664:	08 f4       	brcc	.+2      	; 0x3668 <DCVOLTMETER_get_max+0x1d2>
    3666:	26 cf       	rjmp	.-436    	; 0x34b4 <DCVOLTMETER_get_max+0x1e>
        uint16 r;
        while (!ADC_readChannel(&r)) {}
        if (max_v < r) max_v = r;
        _delay_us(20);
    }
    return max_v;
    3668:	8b 8d       	ldd	r24, Y+27	; 0x1b
    366a:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
    366c:	6e 96       	adiw	r28, 0x1e	; 30
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <ACAMMETER_run>:
 *
 * This function initializes the ADC, continuously reads the peak AC voltage,
 * converts it to current using a predefined formula, and displays the result
 * on an LCD. The function exits when the exit key is pressed.
 */
void ACAMMETER_run(void) {
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	28 97       	sbiw	r28, 0x08	; 8
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    uint16 dcc = 0;
    3692:	18 86       	std	Y+8, r1	; 0x08
    3694:	1f 82       	std	Y+7, r1	; 0x07
    uint16 analog = 0;
    3696:	1e 82       	std	Y+6, r1	; 0x06
    3698:	1d 82       	std	Y+5, r1	; 0x05
    float32 vdiff = 0;
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a0 e0       	ldi	r26, 0x00	; 0
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	89 83       	std	Y+1, r24	; 0x01
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	ab 83       	std	Y+3, r26	; 0x03
    36a8:	bc 83       	std	Y+4, r27	; 0x04

    ADC_init(3);
    36aa:	83 e0       	ldi	r24, 0x03	; 3
    36ac:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>
    LCD_displayString("AC Current:   ");
    36b0:	82 e6       	ldi	r24, 0x62	; 98
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>

    while (1) {
        analog = ACVOLTMETER_get_max();
    36b8:	0e 94 57 19 	call	0x32ae	; 0x32ae <ACVOLTMETER_get_max>
    36bc:	9e 83       	std	Y+6, r25	; 0x06
    36be:	8d 83       	std	Y+5, r24	; 0x05
        vdiff = (analog * 5000.0) / 1023.0;
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	cc 01       	movw	r24, r24
    36c6:	a0 e0       	ldi	r26, 0x00	; 0
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	bc 01       	movw	r22, r24
    36cc:	cd 01       	movw	r24, r26
    36ce:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e4       	ldi	r19, 0x40	; 64
    36de:	4c e9       	ldi	r20, 0x9C	; 156
    36e0:	55 e4       	ldi	r21, 0x45	; 69
    36e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	bc 01       	movw	r22, r24
    36ec:	cd 01       	movw	r24, r26
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 ec       	ldi	r19, 0xC0	; 192
    36f2:	4f e7       	ldi	r20, 0x7F	; 127
    36f4:	54 e4       	ldi	r21, 0x44	; 68
    36f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	ab 83       	std	Y+3, r26	; 0x03
    3704:	bc 83       	std	Y+4, r27	; 0x04
        vdiff *= 3;
    3706:	69 81       	ldd	r22, Y+1	; 0x01
    3708:	7a 81       	ldd	r23, Y+2	; 0x02
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	9c 81       	ldd	r25, Y+4	; 0x04
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e4       	ldi	r20, 0x40	; 64
    3714:	50 e4       	ldi	r21, 0x40	; 64
    3716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	9a 83       	std	Y+2, r25	; 0x02
    3722:	ab 83       	std	Y+3, r26	; 0x03
    3724:	bc 83       	std	Y+4, r27	; 0x04
        dcc = vdiff / 30;
    3726:	69 81       	ldd	r22, Y+1	; 0x01
    3728:	7a 81       	ldd	r23, Y+2	; 0x02
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	9c 81       	ldd	r25, Y+4	; 0x04
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 ef       	ldi	r20, 0xF0	; 240
    3734:	51 e4       	ldi	r21, 0x41	; 65
    3736:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	98 87       	std	Y+8, r25	; 0x08
    374c:	8f 83       	std	Y+7, r24	; 0x07
        LCD_moveCursor(1, 0);
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
        if (dcc > 1000) {
    3756:	8f 81       	ldd	r24, Y+7	; 0x07
    3758:	98 85       	ldd	r25, Y+8	; 0x08
    375a:	23 e0       	ldi	r18, 0x03	; 3
    375c:	89 3e       	cpi	r24, 0xE9	; 233
    375e:	92 07       	cpc	r25, r18
    3760:	e0 f0       	brcs	.+56     	; 0x379a <ACAMMETER_run+0x11c>
            LCD_intgerToString(dcc / 1000);
    3762:	8f 81       	ldd	r24, Y+7	; 0x07
    3764:	98 85       	ldd	r25, Y+8	; 0x08
    3766:	28 ee       	ldi	r18, 0xE8	; 232
    3768:	33 e0       	ldi	r19, 0x03	; 3
    376a:	b9 01       	movw	r22, r18
    376c:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    3770:	cb 01       	movw	r24, r22
    3772:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(".");
    3776:	81 e7       	ldi	r24, 0x71	; 113
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
            LCD_intgerToString(dcc % 1000);
    377e:	8f 81       	ldd	r24, Y+7	; 0x07
    3780:	98 85       	ldd	r25, Y+8	; 0x08
    3782:	28 ee       	ldi	r18, 0xE8	; 232
    3784:	33 e0       	ldi	r19, 0x03	; 3
    3786:	b9 01       	movw	r22, r18
    3788:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    378c:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" Amp");
    3790:	83 e7       	ldi	r24, 0x73	; 115
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
    3798:	08 c0       	rjmp	.+16     	; 0x37aa <ACAMMETER_run+0x12c>
        } else {
            LCD_intgerToString(dcc);
    379a:	8f 81       	ldd	r24, Y+7	; 0x07
    379c:	98 85       	ldd	r25, Y+8	; 0x08
    379e:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" mAmp");
    37a2:	88 e7       	ldi	r24, 0x78	; 120
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
        }
        KEYPAD_getPressedKeyInterrupts(&exit_check);
    37aa:	82 e4       	ldi	r24, 0x42	; 66
    37ac:	92 e0       	ldi	r25, 0x02	; 2
    37ae:	0e 94 8b 0c 	call	0x1916	; 0x1916 <KEYPAD_getPressedKeyInterrupts>
        if (exit_check == EXIT_OPERATION) {
    37b2:	80 91 42 02 	lds	r24, 0x0242
    37b6:	8d 33       	cpi	r24, 0x3D	; 61
    37b8:	09 f0       	breq	.+2      	; 0x37bc <ACAMMETER_run+0x13e>
    37ba:	7e cf       	rjmp	.-260    	; 0x36b8 <ACAMMETER_run+0x3a>
            LCD_clearScreen();
    37bc:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            exit_check = 'a';
    37c0:	81 e6       	ldi	r24, 0x61	; 97
    37c2:	80 93 42 02 	sts	0x0242, r24
            break;
        }
    }
    37c6:	28 96       	adiw	r28, 0x08	; 8
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <DCAMMETER_run>:
 *
 * This function initializes the ADC, continuously reads the peak DC voltage,
 * converts it to current using a predefined formula, and displays the result
 * on an LCD. The function exits when the exit key is pressed.
 */
void DCAMMETER_run(void) {
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	28 97       	sbiw	r28, 0x08	; 8
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    uint16 dcc = 0;
    37ec:	18 86       	std	Y+8, r1	; 0x08
    37ee:	1f 82       	std	Y+7, r1	; 0x07
    uint16 analog = 0;
    37f0:	1e 82       	std	Y+6, r1	; 0x06
    37f2:	1d 82       	std	Y+5, r1	; 0x05
    float32 vdiff = 0;
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	a0 e0       	ldi	r26, 0x00	; 0
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	89 83       	std	Y+1, r24	; 0x01
    37fe:	9a 83       	std	Y+2, r25	; 0x02
    3800:	ab 83       	std	Y+3, r26	; 0x03
    3802:	bc 83       	std	Y+4, r27	; 0x04

    ADC_init(3);
    3804:	83 e0       	ldi	r24, 0x03	; 3
    3806:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>
    LCD_displayString("DC Current:   ");
    380a:	8e e7       	ldi	r24, 0x7E	; 126
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>

    while (1) {
        analog = DCVOLTMETER_get_max();
    3812:	0e 94 4b 1a 	call	0x3496	; 0x3496 <DCVOLTMETER_get_max>
    3816:	9e 83       	std	Y+6, r25	; 0x06
    3818:	8d 83       	std	Y+5, r24	; 0x05
        vdiff = (analog * 5000.0) / 1023.0;
    381a:	8d 81       	ldd	r24, Y+5	; 0x05
    381c:	9e 81       	ldd	r25, Y+6	; 0x06
    381e:	cc 01       	movw	r24, r24
    3820:	a0 e0       	ldi	r26, 0x00	; 0
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	bc 01       	movw	r22, r24
    3826:	cd 01       	movw	r24, r26
    3828:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e4       	ldi	r19, 0x40	; 64
    3838:	4c e9       	ldi	r20, 0x9C	; 156
    383a:	55 e4       	ldi	r21, 0x45	; 69
    383c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	bc 01       	movw	r22, r24
    3846:	cd 01       	movw	r24, r26
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 ec       	ldi	r19, 0xC0	; 192
    384c:	4f e7       	ldi	r20, 0x7F	; 127
    384e:	54 e4       	ldi	r21, 0x44	; 68
    3850:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	89 83       	std	Y+1, r24	; 0x01
    385a:	9a 83       	std	Y+2, r25	; 0x02
    385c:	ab 83       	std	Y+3, r26	; 0x03
    385e:	bc 83       	std	Y+4, r27	; 0x04
        vdiff *= 3;
    3860:	69 81       	ldd	r22, Y+1	; 0x01
    3862:	7a 81       	ldd	r23, Y+2	; 0x02
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	9c 81       	ldd	r25, Y+4	; 0x04
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e4       	ldi	r20, 0x40	; 64
    386e:	50 e4       	ldi	r21, 0x40	; 64
    3870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	9a 83       	std	Y+2, r25	; 0x02
    387c:	ab 83       	std	Y+3, r26	; 0x03
    387e:	bc 83       	std	Y+4, r27	; 0x04
        dcc = vdiff / 30;
    3880:	69 81       	ldd	r22, Y+1	; 0x01
    3882:	7a 81       	ldd	r23, Y+2	; 0x02
    3884:	8b 81       	ldd	r24, Y+3	; 0x03
    3886:	9c 81       	ldd	r25, Y+4	; 0x04
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 ef       	ldi	r20, 0xF0	; 240
    388e:	51 e4       	ldi	r21, 0x41	; 65
    3890:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	98 87       	std	Y+8, r25	; 0x08
    38a6:	8f 83       	std	Y+7, r24	; 0x07
        LCD_moveCursor(1, 0);
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
        if (dcc > 1000) {
    38b0:	8f 81       	ldd	r24, Y+7	; 0x07
    38b2:	98 85       	ldd	r25, Y+8	; 0x08
    38b4:	23 e0       	ldi	r18, 0x03	; 3
    38b6:	89 3e       	cpi	r24, 0xE9	; 233
    38b8:	92 07       	cpc	r25, r18
    38ba:	e0 f0       	brcs	.+56     	; 0x38f4 <DCAMMETER_run+0x11c>
            LCD_intgerToString(dcc / 1000);
    38bc:	8f 81       	ldd	r24, Y+7	; 0x07
    38be:	98 85       	ldd	r25, Y+8	; 0x08
    38c0:	28 ee       	ldi	r18, 0xE8	; 232
    38c2:	33 e0       	ldi	r19, 0x03	; 3
    38c4:	b9 01       	movw	r22, r18
    38c6:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    38ca:	cb 01       	movw	r24, r22
    38cc:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(".");
    38d0:	81 e7       	ldi	r24, 0x71	; 113
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
            LCD_intgerToString(dcc % 1000);
    38d8:	8f 81       	ldd	r24, Y+7	; 0x07
    38da:	98 85       	ldd	r25, Y+8	; 0x08
    38dc:	28 ee       	ldi	r18, 0xE8	; 232
    38de:	33 e0       	ldi	r19, 0x03	; 3
    38e0:	b9 01       	movw	r22, r18
    38e2:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    38e6:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" Amp");
    38ea:	83 e7       	ldi	r24, 0x73	; 115
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
    38f2:	08 c0       	rjmp	.+16     	; 0x3904 <DCAMMETER_run+0x12c>
        } else {
            LCD_intgerToString(dcc);
    38f4:	8f 81       	ldd	r24, Y+7	; 0x07
    38f6:	98 85       	ldd	r25, Y+8	; 0x08
    38f8:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" mAmp");
    38fc:	88 e7       	ldi	r24, 0x78	; 120
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
        }
        KEYPAD_getPressedKeyInterrupts(&exit_check);
    3904:	82 e4       	ldi	r24, 0x42	; 66
    3906:	92 e0       	ldi	r25, 0x02	; 2
    3908:	0e 94 8b 0c 	call	0x1916	; 0x1916 <KEYPAD_getPressedKeyInterrupts>
        if (exit_check == EXIT_OPERATION) {
    390c:	80 91 42 02 	lds	r24, 0x0242
    3910:	8d 33       	cpi	r24, 0x3D	; 61
    3912:	09 f0       	breq	.+2      	; 0x3916 <DCAMMETER_run+0x13e>
    3914:	7e cf       	rjmp	.-260    	; 0x3812 <DCAMMETER_run+0x3a>
            LCD_clearScreen();
    3916:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            exit_check = 'a';
    391a:	81 e6       	ldi	r24, 0x61	; 97
    391c:	80 93 42 02 	sts	0x0242, r24
            break;
        }
    }
    3920:	28 96       	adiw	r28, 0x08	; 8
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	f8 94       	cli
    3926:	de bf       	out	0x3e, r29	; 62
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	cd bf       	out	0x3d, r28	; 61
    392c:	cf 91       	pop	r28
    392e:	df 91       	pop	r29
    3930:	08 95       	ret

00003932 <DCVOLTMETER_run>:
 *
 * This function initializes the ADC, continuously reads the DC voltage, converts
 * it to a readable format, and displays the result on an LCD. The function
 * exits when the exit key is pressed.
 */
void DCVOLTMETER_run(void) {
    3932:	df 93       	push	r29
    3934:	cf 93       	push	r28
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	68 97       	sbiw	r28, 0x18	; 24
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    float32 input_volt = 0.0;
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	a0 e0       	ldi	r26, 0x00	; 0
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	8d 8b       	std	Y+21, r24	; 0x15
    3950:	9e 8b       	std	Y+22, r25	; 0x16
    3952:	af 8b       	std	Y+23, r26	; 0x17
    3954:	b8 8f       	std	Y+24, r27	; 0x18
    float32 temp = 0.0;
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	a0 e0       	ldi	r26, 0x00	; 0
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	89 8b       	std	Y+17, r24	; 0x11
    3960:	9a 8b       	std	Y+18, r25	; 0x12
    3962:	ab 8b       	std	Y+19, r26	; 0x13
    3964:	bc 8b       	std	Y+20, r27	; 0x14
    float32 r1 = 10000.0;    // resistance value
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e4       	ldi	r25, 0x40	; 64
    396a:	ac e1       	ldi	r26, 0x1C	; 28
    396c:	b6 e4       	ldi	r27, 0x46	; 70
    396e:	8d 87       	std	Y+13, r24	; 0x0d
    3970:	9e 87       	std	Y+14, r25	; 0x0e
    3972:	af 87       	std	Y+15, r26	; 0x0f
    3974:	b8 8b       	std	Y+16, r27	; 0x10
    float32 r2 = 100000.0;   // resistance value
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	90 e5       	ldi	r25, 0x50	; 80
    397a:	a3 ec       	ldi	r26, 0xC3	; 195
    397c:	b7 e4       	ldi	r27, 0x47	; 71
    397e:	89 87       	std	Y+9, r24	; 0x09
    3980:	9a 87       	std	Y+10, r25	; 0x0a
    3982:	ab 87       	std	Y+11, r26	; 0x0b
    3984:	bc 87       	std	Y+12, r27	; 0x0c
    uint16 milli_volt = 0;
    3986:	18 86       	std	Y+8, r1	; 0x08
    3988:	1f 82       	std	Y+7, r1	; 0x07
    float32 v = 0;
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a0 e0       	ldi	r26, 0x00	; 0
    3990:	b0 e0       	ldi	r27, 0x00	; 0
    3992:	8b 83       	std	Y+3, r24	; 0x03
    3994:	9c 83       	std	Y+4, r25	; 0x04
    3996:	ad 83       	std	Y+5, r26	; 0x05
    3998:	be 83       	std	Y+6, r27	; 0x06
    int flag = 0;
    399a:	1a 82       	std	Y+2, r1	; 0x02
    399c:	19 82       	std	Y+1, r1	; 0x01
    ADC_init(1);
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>
    LCD_displayString("DC Voltage:           ");
    39a4:	8d e8       	ldi	r24, 0x8D	; 141
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>

    while (1) {
        v = DCVOLTMETER_get_max();
    39ac:	0e 94 4b 1a 	call	0x3496	; 0x3496 <DCVOLTMETER_get_max>
    39b0:	cc 01       	movw	r24, r24
    39b2:	a0 e0       	ldi	r26, 0x00	; 0
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	bc 01       	movw	r22, r24
    39b8:	cd 01       	movw	r24, r26
    39ba:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	8b 83       	std	Y+3, r24	; 0x03
    39c4:	9c 83       	std	Y+4, r25	; 0x04
    39c6:	ad 83       	std	Y+5, r26	; 0x05
    39c8:	be 83       	std	Y+6, r27	; 0x06
        if (v < 100) {
    39ca:	6b 81       	ldd	r22, Y+3	; 0x03
    39cc:	7c 81       	ldd	r23, Y+4	; 0x04
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	48 ec       	ldi	r20, 0xC8	; 200
    39d8:	52 e4       	ldi	r21, 0x42	; 66
    39da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39de:	88 23       	and	r24, r24
    39e0:	0c f0       	brlt	.+2      	; 0x39e4 <DCVOLTMETER_run+0xb2>
    39e2:	74 c0       	rjmp	.+232    	; 0x3acc <DCVOLTMETER_run+0x19a>
            flag = 1;
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	9a 83       	std	Y+2, r25	; 0x02
    39ea:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(ADMUX, 6);
    39ec:	a7 e2       	ldi	r26, 0x27	; 39
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e7 e2       	ldi	r30, 0x27	; 39
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	80 64       	ori	r24, 0x40	; 64
    39f8:	8c 93       	st	X, r24
            SET_BIT(ADMUX, 7);  // Use internal voltage reference
    39fa:	a7 e2       	ldi	r26, 0x27	; 39
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	e7 e2       	ldi	r30, 0x27	; 39
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	80 68       	ori	r24, 0x80	; 128
    3a06:	8c 93       	st	X, r24
            v = DCVOLTMETER_get_max();
    3a08:	0e 94 4b 1a 	call	0x3496	; 0x3496 <DCVOLTMETER_get_max>
    3a0c:	cc 01       	movw	r24, r24
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	bc 01       	movw	r22, r24
    3a14:	cd 01       	movw	r24, r26
    3a16:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	8b 83       	std	Y+3, r24	; 0x03
    3a20:	9c 83       	std	Y+4, r25	; 0x04
    3a22:	ad 83       	std	Y+5, r26	; 0x05
    3a24:	be 83       	std	Y+6, r27	; 0x06
            temp = (v * 2.56) / 1023.0;
    3a26:	6b 81       	ldd	r22, Y+3	; 0x03
    3a28:	7c 81       	ldd	r23, Y+4	; 0x04
    3a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a2e:	2a e0       	ldi	r18, 0x0A	; 10
    3a30:	37 ed       	ldi	r19, 0xD7	; 215
    3a32:	43 e2       	ldi	r20, 0x23	; 35
    3a34:	50 e4       	ldi	r21, 0x40	; 64
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 ec       	ldi	r19, 0xC0	; 192
    3a46:	4f e7       	ldi	r20, 0x7F	; 127
    3a48:	54 e4       	ldi	r21, 0x44	; 68
    3a4a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	89 8b       	std	Y+17, r24	; 0x11
    3a54:	9a 8b       	std	Y+18, r25	; 0x12
    3a56:	ab 8b       	std	Y+19, r26	; 0x13
    3a58:	bc 8b       	std	Y+20, r27	; 0x14
            input_volt = temp / (r2 / (r1 + r2));
    3a5a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a5c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a60:	98 89       	ldd	r25, Y+16	; 0x10
    3a62:	29 85       	ldd	r18, Y+9	; 0x09
    3a64:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a66:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a68:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a6a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	9c 01       	movw	r18, r24
    3a74:	ad 01       	movw	r20, r26
    3a76:	69 85       	ldd	r22, Y+9	; 0x09
    3a78:	7a 85       	ldd	r23, Y+10	; 0x0a
    3a7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	9c 01       	movw	r18, r24
    3a88:	ad 01       	movw	r20, r26
    3a8a:	69 89       	ldd	r22, Y+17	; 0x11
    3a8c:	7a 89       	ldd	r23, Y+18	; 0x12
    3a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a90:	9c 89       	ldd	r25, Y+20	; 0x14
    3a92:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	8d 8b       	std	Y+21, r24	; 0x15
    3a9c:	9e 8b       	std	Y+22, r25	; 0x16
    3a9e:	af 8b       	std	Y+23, r26	; 0x17
    3aa0:	b8 8f       	std	Y+24, r27	; 0x18
            milli_volt = input_volt * 1000;
    3aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	4a e7       	ldi	r20, 0x7A	; 122
    3ab0:	54 e4       	ldi	r21, 0x44	; 68
    3ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	bc 01       	movw	r22, r24
    3abc:	cd 01       	movw	r24, r26
    3abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	98 87       	std	Y+8, r25	; 0x08
    3ac8:	8f 83       	std	Y+7, r24	; 0x07
    3aca:	70 c0       	rjmp	.+224    	; 0x3bac <DCVOLTMETER_run+0x27a>
        } else {
            flag = 0;
    3acc:	1a 82       	std	Y+2, r1	; 0x02
    3ace:	19 82       	std	Y+1, r1	; 0x01
            if (v > 725) v -= 1;
    3ad0:	6b 81       	ldd	r22, Y+3	; 0x03
    3ad2:	7c 81       	ldd	r23, Y+4	; 0x04
    3ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e4       	ldi	r19, 0x40	; 64
    3adc:	45 e3       	ldi	r20, 0x35	; 53
    3ade:	54 e4       	ldi	r21, 0x44	; 68
    3ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ae4:	18 16       	cp	r1, r24
    3ae6:	84 f4       	brge	.+32     	; 0x3b08 <DCVOLTMETER_run+0x1d6>
    3ae8:	6b 81       	ldd	r22, Y+3	; 0x03
    3aea:	7c 81       	ldd	r23, Y+4	; 0x04
    3aec:	8d 81       	ldd	r24, Y+5	; 0x05
    3aee:	9e 81       	ldd	r25, Y+6	; 0x06
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e8       	ldi	r20, 0x80	; 128
    3af6:	5f e3       	ldi	r21, 0x3F	; 63
    3af8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	8b 83       	std	Y+3, r24	; 0x03
    3b02:	9c 83       	std	Y+4, r25	; 0x04
    3b04:	ad 83       	std	Y+5, r26	; 0x05
    3b06:	be 83       	std	Y+6, r27	; 0x06
            temp = (v * 5.0) / 1023.0;
    3b08:	6b 81       	ldd	r22, Y+3	; 0x03
    3b0a:	7c 81       	ldd	r23, Y+4	; 0x04
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 ea       	ldi	r20, 0xA0	; 160
    3b16:	50 e4       	ldi	r21, 0x40	; 64
    3b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 ec       	ldi	r19, 0xC0	; 192
    3b28:	4f e7       	ldi	r20, 0x7F	; 127
    3b2a:	54 e4       	ldi	r21, 0x44	; 68
    3b2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	89 8b       	std	Y+17, r24	; 0x11
    3b36:	9a 8b       	std	Y+18, r25	; 0x12
    3b38:	ab 8b       	std	Y+19, r26	; 0x13
    3b3a:	bc 8b       	std	Y+20, r27	; 0x14
            input_volt = temp / (r2 / (r1 + r2));
    3b3c:	6d 85       	ldd	r22, Y+13	; 0x0d
    3b3e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b42:	98 89       	ldd	r25, Y+16	; 0x10
    3b44:	29 85       	ldd	r18, Y+9	; 0x09
    3b46:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b48:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b4a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b4c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	9c 01       	movw	r18, r24
    3b56:	ad 01       	movw	r20, r26
    3b58:	69 85       	ldd	r22, Y+9	; 0x09
    3b5a:	7a 85       	ldd	r23, Y+10	; 0x0a
    3b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b60:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	9c 01       	movw	r18, r24
    3b6a:	ad 01       	movw	r20, r26
    3b6c:	69 89       	ldd	r22, Y+17	; 0x11
    3b6e:	7a 89       	ldd	r23, Y+18	; 0x12
    3b70:	8b 89       	ldd	r24, Y+19	; 0x13
    3b72:	9c 89       	ldd	r25, Y+20	; 0x14
    3b74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	8d 8b       	std	Y+21, r24	; 0x15
    3b7e:	9e 8b       	std	Y+22, r25	; 0x16
    3b80:	af 8b       	std	Y+23, r26	; 0x17
    3b82:	b8 8f       	std	Y+24, r27	; 0x18
            milli_volt = input_volt * 1000;
    3b84:	6d 89       	ldd	r22, Y+21	; 0x15
    3b86:	7e 89       	ldd	r23, Y+22	; 0x16
    3b88:	8f 89       	ldd	r24, Y+23	; 0x17
    3b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	4a e7       	ldi	r20, 0x7A	; 122
    3b92:	54 e4       	ldi	r21, 0x44	; 68
    3b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	bc 01       	movw	r22, r24
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	98 87       	std	Y+8, r25	; 0x08
    3baa:	8f 83       	std	Y+7, r24	; 0x07
        }

        LCD_moveCursor(1, 0);
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
        if (milli_volt > 1000) {
    3bb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3bb6:	98 85       	ldd	r25, Y+8	; 0x08
    3bb8:	23 e0       	ldi	r18, 0x03	; 3
    3bba:	89 3e       	cpi	r24, 0xE9	; 233
    3bbc:	92 07       	cpc	r25, r18
    3bbe:	e0 f0       	brcs	.+56     	; 0x3bf8 <DCVOLTMETER_run+0x2c6>
            LCD_intgerToString(milli_volt / 1000);
    3bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    3bc2:	98 85       	ldd	r25, Y+8	; 0x08
    3bc4:	28 ee       	ldi	r18, 0xE8	; 232
    3bc6:	33 e0       	ldi	r19, 0x03	; 3
    3bc8:	b9 01       	movw	r22, r18
    3bca:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    3bce:	cb 01       	movw	r24, r22
    3bd0:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(".");
    3bd4:	81 e7       	ldi	r24, 0x71	; 113
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
            LCD_intgerToString(milli_volt % 1000);
    3bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3bde:	98 85       	ldd	r25, Y+8	; 0x08
    3be0:	28 ee       	ldi	r18, 0xE8	; 232
    3be2:	33 e0       	ldi	r19, 0x03	; 3
    3be4:	b9 01       	movw	r22, r18
    3be6:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    3bea:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" V             ");
    3bee:	84 ea       	ldi	r24, 0xA4	; 164
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
    3bf6:	08 c0       	rjmp	.+16     	; 0x3c08 <DCVOLTMETER_run+0x2d6>
        } else {
            LCD_intgerToString(milli_volt);
    3bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    3bfa:	98 85       	ldd	r25, Y+8	; 0x08
    3bfc:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" mV            ");
    3c00:	84 eb       	ldi	r24, 0xB4	; 180
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
        }

        KEYPAD_getPressedKeyInterrupts(&exit_check);
    3c08:	82 e4       	ldi	r24, 0x42	; 66
    3c0a:	92 e0       	ldi	r25, 0x02	; 2
    3c0c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <KEYPAD_getPressedKeyInterrupts>
        if (exit_check == EXIT_OPERATION) {
    3c10:	80 91 42 02 	lds	r24, 0x0242
    3c14:	8d 33       	cpi	r24, 0x3D	; 61
    3c16:	09 f0       	breq	.+2      	; 0x3c1a <DCVOLTMETER_run+0x2e8>
    3c18:	c9 ce       	rjmp	.-622    	; 0x39ac <DCVOLTMETER_run+0x7a>
            LCD_clearScreen();
    3c1a:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            exit_check = 'a';
    3c1e:	81 e6       	ldi	r24, 0x61	; 97
    3c20:	80 93 42 02 	sts	0x0242, r24
            break;
        }
    }
    3c24:	68 96       	adiw	r28, 0x18	; 24
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	cd bf       	out	0x3d, r28	; 61
    3c30:	cf 91       	pop	r28
    3c32:	df 91       	pop	r29
    3c34:	08 95       	ret

00003c36 <ACVOLTMETER_run>:
 *
 * This function initializes the ADC, continuously reads the AC voltage, converts
 * it to a readable format, and displays the result on an LCD. The function
 * exits when the exit key is pressed.
 */
void ACVOLTMETER_run(void) {
    3c36:	df 93       	push	r29
    3c38:	cf 93       	push	r28
    3c3a:	cd b7       	in	r28, 0x3d	; 61
    3c3c:	de b7       	in	r29, 0x3e	; 62
    3c3e:	68 97       	sbiw	r28, 0x18	; 24
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    float32 input_volt = 0.0;
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	a0 e0       	ldi	r26, 0x00	; 0
    3c50:	b0 e0       	ldi	r27, 0x00	; 0
    3c52:	8d 8b       	std	Y+21, r24	; 0x15
    3c54:	9e 8b       	std	Y+22, r25	; 0x16
    3c56:	af 8b       	std	Y+23, r26	; 0x17
    3c58:	b8 8f       	std	Y+24, r27	; 0x18
    float32 temp = 0.0;
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	a0 e0       	ldi	r26, 0x00	; 0
    3c60:	b0 e0       	ldi	r27, 0x00	; 0
    3c62:	89 8b       	std	Y+17, r24	; 0x11
    3c64:	9a 8b       	std	Y+18, r25	; 0x12
    3c66:	ab 8b       	std	Y+19, r26	; 0x13
    3c68:	bc 8b       	std	Y+20, r27	; 0x14
    float32 r1 = 10000.0;    // resistance value
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	90 e4       	ldi	r25, 0x40	; 64
    3c6e:	ac e1       	ldi	r26, 0x1C	; 28
    3c70:	b6 e4       	ldi	r27, 0x46	; 70
    3c72:	8d 87       	std	Y+13, r24	; 0x0d
    3c74:	9e 87       	std	Y+14, r25	; 0x0e
    3c76:	af 87       	std	Y+15, r26	; 0x0f
    3c78:	b8 8b       	std	Y+16, r27	; 0x10
    float32 r2 = 100000.0;   // resistance value
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	90 e5       	ldi	r25, 0x50	; 80
    3c7e:	a3 ec       	ldi	r26, 0xC3	; 195
    3c80:	b7 e4       	ldi	r27, 0x47	; 71
    3c82:	89 87       	std	Y+9, r24	; 0x09
    3c84:	9a 87       	std	Y+10, r25	; 0x0a
    3c86:	ab 87       	std	Y+11, r26	; 0x0b
    3c88:	bc 87       	std	Y+12, r27	; 0x0c
    uint16 milli_volt = 0;
    3c8a:	18 86       	std	Y+8, r1	; 0x08
    3c8c:	1f 82       	std	Y+7, r1	; 0x07
    float32 v = 0;
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	a0 e0       	ldi	r26, 0x00	; 0
    3c94:	b0 e0       	ldi	r27, 0x00	; 0
    3c96:	8b 83       	std	Y+3, r24	; 0x03
    3c98:	9c 83       	std	Y+4, r25	; 0x04
    3c9a:	ad 83       	std	Y+5, r26	; 0x05
    3c9c:	be 83       	std	Y+6, r27	; 0x06
    int flag = 0;
    3c9e:	1a 82       	std	Y+2, r1	; 0x02
    3ca0:	19 82       	std	Y+1, r1	; 0x01
    ADC_init(2);
    3ca2:	82 e0       	ldi	r24, 0x02	; 2
    3ca4:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>
    LCD_displayString("AC Voltage:           ");
    3ca8:	84 ec       	ldi	r24, 0xC4	; 196
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>

    while (1) {
        v = DCVOLTMETER_get_max();
    3cb0:	0e 94 4b 1a 	call	0x3496	; 0x3496 <DCVOLTMETER_get_max>
    3cb4:	cc 01       	movw	r24, r24
    3cb6:	a0 e0       	ldi	r26, 0x00	; 0
    3cb8:	b0 e0       	ldi	r27, 0x00	; 0
    3cba:	bc 01       	movw	r22, r24
    3cbc:	cd 01       	movw	r24, r26
    3cbe:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	8b 83       	std	Y+3, r24	; 0x03
    3cc8:	9c 83       	std	Y+4, r25	; 0x04
    3cca:	ad 83       	std	Y+5, r26	; 0x05
    3ccc:	be 83       	std	Y+6, r27	; 0x06
        if (v < 100) {
    3cce:	6b 81       	ldd	r22, Y+3	; 0x03
    3cd0:	7c 81       	ldd	r23, Y+4	; 0x04
    3cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	48 ec       	ldi	r20, 0xC8	; 200
    3cdc:	52 e4       	ldi	r21, 0x42	; 66
    3cde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce2:	88 23       	and	r24, r24
    3ce4:	0c f0       	brlt	.+2      	; 0x3ce8 <ACVOLTMETER_run+0xb2>
    3ce6:	74 c0       	rjmp	.+232    	; 0x3dd0 <ACVOLTMETER_run+0x19a>
            flag = 1;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	9a 83       	std	Y+2, r25	; 0x02
    3cee:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(ADMUX, 6);
    3cf0:	a7 e2       	ldi	r26, 0x27	; 39
    3cf2:	b0 e0       	ldi	r27, 0x00	; 0
    3cf4:	e7 e2       	ldi	r30, 0x27	; 39
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	80 81       	ld	r24, Z
    3cfa:	80 64       	ori	r24, 0x40	; 64
    3cfc:	8c 93       	st	X, r24
            SET_BIT(ADMUX, 7);  // Use internal voltage reference
    3cfe:	a7 e2       	ldi	r26, 0x27	; 39
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	e7 e2       	ldi	r30, 0x27	; 39
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	80 81       	ld	r24, Z
    3d08:	80 68       	ori	r24, 0x80	; 128
    3d0a:	8c 93       	st	X, r24
            v = DCVOLTMETER_get_max();
    3d0c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <DCVOLTMETER_get_max>
    3d10:	cc 01       	movw	r24, r24
    3d12:	a0 e0       	ldi	r26, 0x00	; 0
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	bc 01       	movw	r22, r24
    3d18:	cd 01       	movw	r24, r26
    3d1a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	8b 83       	std	Y+3, r24	; 0x03
    3d24:	9c 83       	std	Y+4, r25	; 0x04
    3d26:	ad 83       	std	Y+5, r26	; 0x05
    3d28:	be 83       	std	Y+6, r27	; 0x06
            temp = (v * 2.56) / 1023.0;
    3d2a:	6b 81       	ldd	r22, Y+3	; 0x03
    3d2c:	7c 81       	ldd	r23, Y+4	; 0x04
    3d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d30:	9e 81       	ldd	r25, Y+6	; 0x06
    3d32:	2a e0       	ldi	r18, 0x0A	; 10
    3d34:	37 ed       	ldi	r19, 0xD7	; 215
    3d36:	43 e2       	ldi	r20, 0x23	; 35
    3d38:	50 e4       	ldi	r21, 0x40	; 64
    3d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	bc 01       	movw	r22, r24
    3d44:	cd 01       	movw	r24, r26
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 ec       	ldi	r19, 0xC0	; 192
    3d4a:	4f e7       	ldi	r20, 0x7F	; 127
    3d4c:	54 e4       	ldi	r21, 0x44	; 68
    3d4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	89 8b       	std	Y+17, r24	; 0x11
    3d58:	9a 8b       	std	Y+18, r25	; 0x12
    3d5a:	ab 8b       	std	Y+19, r26	; 0x13
    3d5c:	bc 8b       	std	Y+20, r27	; 0x14
            input_volt = temp / (r2 / (r1 + r2));
    3d5e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d60:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d64:	98 89       	ldd	r25, Y+16	; 0x10
    3d66:	29 85       	ldd	r18, Y+9	; 0x09
    3d68:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d6e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3d72:	dc 01       	movw	r26, r24
    3d74:	cb 01       	movw	r24, r22
    3d76:	9c 01       	movw	r18, r24
    3d78:	ad 01       	movw	r20, r26
    3d7a:	69 85       	ldd	r22, Y+9	; 0x09
    3d7c:	7a 85       	ldd	r23, Y+10	; 0x0a
    3d7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d80:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	9c 01       	movw	r18, r24
    3d8c:	ad 01       	movw	r20, r26
    3d8e:	69 89       	ldd	r22, Y+17	; 0x11
    3d90:	7a 89       	ldd	r23, Y+18	; 0x12
    3d92:	8b 89       	ldd	r24, Y+19	; 0x13
    3d94:	9c 89       	ldd	r25, Y+20	; 0x14
    3d96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	8d 8b       	std	Y+21, r24	; 0x15
    3da0:	9e 8b       	std	Y+22, r25	; 0x16
    3da2:	af 8b       	std	Y+23, r26	; 0x17
    3da4:	b8 8f       	std	Y+24, r27	; 0x18
            milli_volt = input_volt * 1000;
    3da6:	6d 89       	ldd	r22, Y+21	; 0x15
    3da8:	7e 89       	ldd	r23, Y+22	; 0x16
    3daa:	8f 89       	ldd	r24, Y+23	; 0x17
    3dac:	98 8d       	ldd	r25, Y+24	; 0x18
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	4a e7       	ldi	r20, 0x7A	; 122
    3db4:	54 e4       	ldi	r21, 0x44	; 68
    3db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	98 87       	std	Y+8, r25	; 0x08
    3dcc:	8f 83       	std	Y+7, r24	; 0x07
    3dce:	70 c0       	rjmp	.+224    	; 0x3eb0 <ACVOLTMETER_run+0x27a>
        } else {
            flag = 0;
    3dd0:	1a 82       	std	Y+2, r1	; 0x02
    3dd2:	19 82       	std	Y+1, r1	; 0x01
            if (v > 725) v -= 1;
    3dd4:	6b 81       	ldd	r22, Y+3	; 0x03
    3dd6:	7c 81       	ldd	r23, Y+4	; 0x04
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e4       	ldi	r19, 0x40	; 64
    3de0:	45 e3       	ldi	r20, 0x35	; 53
    3de2:	54 e4       	ldi	r21, 0x44	; 68
    3de4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3de8:	18 16       	cp	r1, r24
    3dea:	84 f4       	brge	.+32     	; 0x3e0c <ACVOLTMETER_run+0x1d6>
    3dec:	6b 81       	ldd	r22, Y+3	; 0x03
    3dee:	7c 81       	ldd	r23, Y+4	; 0x04
    3df0:	8d 81       	ldd	r24, Y+5	; 0x05
    3df2:	9e 81       	ldd	r25, Y+6	; 0x06
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	40 e8       	ldi	r20, 0x80	; 128
    3dfa:	5f e3       	ldi	r21, 0x3F	; 63
    3dfc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	8b 83       	std	Y+3, r24	; 0x03
    3e06:	9c 83       	std	Y+4, r25	; 0x04
    3e08:	ad 83       	std	Y+5, r26	; 0x05
    3e0a:	be 83       	std	Y+6, r27	; 0x06
            temp = (v * 5.0) / 1023.0;
    3e0c:	6b 81       	ldd	r22, Y+3	; 0x03
    3e0e:	7c 81       	ldd	r23, Y+4	; 0x04
    3e10:	8d 81       	ldd	r24, Y+5	; 0x05
    3e12:	9e 81       	ldd	r25, Y+6	; 0x06
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 ea       	ldi	r20, 0xA0	; 160
    3e1a:	50 e4       	ldi	r21, 0x40	; 64
    3e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	bc 01       	movw	r22, r24
    3e26:	cd 01       	movw	r24, r26
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 ec       	ldi	r19, 0xC0	; 192
    3e2c:	4f e7       	ldi	r20, 0x7F	; 127
    3e2e:	54 e4       	ldi	r21, 0x44	; 68
    3e30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	89 8b       	std	Y+17, r24	; 0x11
    3e3a:	9a 8b       	std	Y+18, r25	; 0x12
    3e3c:	ab 8b       	std	Y+19, r26	; 0x13
    3e3e:	bc 8b       	std	Y+20, r27	; 0x14
            input_volt = temp / (r2 / (r1 + r2));
    3e40:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e42:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e46:	98 89       	ldd	r25, Y+16	; 0x10
    3e48:	29 85       	ldd	r18, Y+9	; 0x09
    3e4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e4c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3e4e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3e50:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	9c 01       	movw	r18, r24
    3e5a:	ad 01       	movw	r20, r26
    3e5c:	69 85       	ldd	r22, Y+9	; 0x09
    3e5e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3e60:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e62:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	9c 01       	movw	r18, r24
    3e6e:	ad 01       	movw	r20, r26
    3e70:	69 89       	ldd	r22, Y+17	; 0x11
    3e72:	7a 89       	ldd	r23, Y+18	; 0x12
    3e74:	8b 89       	ldd	r24, Y+19	; 0x13
    3e76:	9c 89       	ldd	r25, Y+20	; 0x14
    3e78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	8d 8b       	std	Y+21, r24	; 0x15
    3e82:	9e 8b       	std	Y+22, r25	; 0x16
    3e84:	af 8b       	std	Y+23, r26	; 0x17
    3e86:	b8 8f       	std	Y+24, r27	; 0x18
            milli_volt = input_volt * 1000;
    3e88:	6d 89       	ldd	r22, Y+21	; 0x15
    3e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	4a e7       	ldi	r20, 0x7A	; 122
    3e96:	54 e4       	ldi	r21, 0x44	; 68
    3e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	cd 01       	movw	r24, r26
    3ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	98 87       	std	Y+8, r25	; 0x08
    3eae:	8f 83       	std	Y+7, r24	; 0x07
        }

        LCD_moveCursor(1, 0);
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	60 e0       	ldi	r22, 0x00	; 0
    3eb4:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
        if (milli_volt > 1000) {
    3eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    3eba:	98 85       	ldd	r25, Y+8	; 0x08
    3ebc:	23 e0       	ldi	r18, 0x03	; 3
    3ebe:	89 3e       	cpi	r24, 0xE9	; 233
    3ec0:	92 07       	cpc	r25, r18
    3ec2:	e0 f0       	brcs	.+56     	; 0x3efc <ACVOLTMETER_run+0x2c6>
            LCD_intgerToString(milli_volt / 1000);
    3ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ec6:	98 85       	ldd	r25, Y+8	; 0x08
    3ec8:	28 ee       	ldi	r18, 0xE8	; 232
    3eca:	33 e0       	ldi	r19, 0x03	; 3
    3ecc:	b9 01       	movw	r22, r18
    3ece:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(".");
    3ed8:	81 e7       	ldi	r24, 0x71	; 113
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
            LCD_intgerToString(milli_volt % 1000);
    3ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    3ee2:	98 85       	ldd	r25, Y+8	; 0x08
    3ee4:	28 ee       	ldi	r18, 0xE8	; 232
    3ee6:	33 e0       	ldi	r19, 0x03	; 3
    3ee8:	b9 01       	movw	r22, r18
    3eea:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    3eee:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" V             ");
    3ef2:	84 ea       	ldi	r24, 0xA4	; 164
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
    3efa:	08 c0       	rjmp	.+16     	; 0x3f0c <ACVOLTMETER_run+0x2d6>
        } else {
            LCD_intgerToString(milli_volt);
    3efc:	8f 81       	ldd	r24, Y+7	; 0x07
    3efe:	98 85       	ldd	r25, Y+8	; 0x08
    3f00:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" mV            ");
    3f04:	84 eb       	ldi	r24, 0xB4	; 180
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
        }

        KEYPAD_getPressedKeyInterrupts(&exit_check);
    3f0c:	82 e4       	ldi	r24, 0x42	; 66
    3f0e:	92 e0       	ldi	r25, 0x02	; 2
    3f10:	0e 94 8b 0c 	call	0x1916	; 0x1916 <KEYPAD_getPressedKeyInterrupts>
        if (exit_check == EXIT_OPERATION) {
    3f14:	80 91 42 02 	lds	r24, 0x0242
    3f18:	8d 33       	cpi	r24, 0x3D	; 61
    3f1a:	09 f0       	breq	.+2      	; 0x3f1e <ACVOLTMETER_run+0x2e8>
    3f1c:	c9 ce       	rjmp	.-622    	; 0x3cb0 <ACVOLTMETER_run+0x7a>
            LCD_clearScreen();
    3f1e:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            exit_check = 'a';
    3f22:	81 e6       	ldi	r24, 0x61	; 97
    3f24:	80 93 42 02 	sts	0x0242, r24
            break;
        }
    }
    3f28:	68 96       	adiw	r28, 0x18	; 24
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <OHMMETER_channelSelect>:
 * This function sets the GPIO pins to select one of the predefined reference
 * resistors based on the given resistor number.
 *
 * @param n The resistor number to select.
 */
void OHMMETER_channelSelect(OhmmeterResistorNumber n) {
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	00 d0       	rcall	.+0      	; 0x3f40 <OHMMETER_channelSelect+0x6>
    3f40:	0f 92       	push	r0
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	89 83       	std	Y+1, r24	; 0x01
    switch (n) {
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	3b 83       	std	Y+3, r19	; 0x03
    3f50:	2a 83       	std	Y+2, r18	; 0x02
    3f52:	8a 81       	ldd	r24, Y+2	; 0x02
    3f54:	9b 81       	ldd	r25, Y+3	; 0x03
    3f56:	82 30       	cpi	r24, 0x02	; 2
    3f58:	91 05       	cpc	r25, r1
    3f5a:	d9 f1       	breq	.+118    	; 0x3fd2 <OHMMETER_channelSelect+0x98>
    3f5c:	2a 81       	ldd	r18, Y+2	; 0x02
    3f5e:	3b 81       	ldd	r19, Y+3	; 0x03
    3f60:	23 30       	cpi	r18, 0x03	; 3
    3f62:	31 05       	cpc	r19, r1
    3f64:	5c f4       	brge	.+22     	; 0x3f7c <OHMMETER_channelSelect+0x42>
    3f66:	8a 81       	ldd	r24, Y+2	; 0x02
    3f68:	9b 81       	ldd	r25, Y+3	; 0x03
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	91 f0       	breq	.+36     	; 0x3f92 <OHMMETER_channelSelect+0x58>
    3f6e:	2a 81       	ldd	r18, Y+2	; 0x02
    3f70:	3b 81       	ldd	r19, Y+3	; 0x03
    3f72:	21 30       	cpi	r18, 0x01	; 1
    3f74:	31 05       	cpc	r19, r1
    3f76:	09 f4       	brne	.+2      	; 0x3f7a <OHMMETER_channelSelect+0x40>
    3f78:	4c c0       	rjmp	.+152    	; 0x4012 <OHMMETER_channelSelect+0xd8>
    3f7a:	5b c0       	rjmp	.+182    	; 0x4032 <OHMMETER_channelSelect+0xf8>
    3f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f80:	83 30       	cpi	r24, 0x03	; 3
    3f82:	91 05       	cpc	r25, r1
    3f84:	b1 f1       	breq	.+108    	; 0x3ff2 <OHMMETER_channelSelect+0xb8>
    3f86:	2a 81       	ldd	r18, Y+2	; 0x02
    3f88:	3b 81       	ldd	r19, Y+3	; 0x03
    3f8a:	24 30       	cpi	r18, 0x04	; 4
    3f8c:	31 05       	cpc	r19, r1
    3f8e:	89 f0       	breq	.+34     	; 0x3fb2 <OHMMETER_channelSelect+0x78>
    3f90:	50 c0       	rjmp	.+160    	; 0x4032 <OHMMETER_channelSelect+0xf8>
    case RESISTOR100:
        GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    3f92:	83 e0       	ldi	r24, 0x03	; 3
    3f94:	66 e0       	ldi	r22, 0x06	; 6
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    3f9c:	83 e0       	ldi	r24, 0x03	; 3
    3f9e:	67 e0       	ldi	r22, 0x07	; 7
    3fa0:	40 e0       	ldi	r20, 0x00	; 0
    3fa2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTA_ID, PIN6_ID, LOGIC_LOW);
    3fa6:	80 e0       	ldi	r24, 0x00	; 0
    3fa8:	66 e0       	ldi	r22, 0x06	; 6
    3faa:	40 e0       	ldi	r20, 0x00	; 0
    3fac:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    3fb0:	4f c0       	rjmp	.+158    	; 0x4050 <OHMMETER_channelSelect+0x116>
        break;
    case RESISTOR2M:
        GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    3fb2:	83 e0       	ldi	r24, 0x03	; 3
    3fb4:	66 e0       	ldi	r22, 0x06	; 6
    3fb6:	41 e0       	ldi	r20, 0x01	; 1
    3fb8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    3fbc:	83 e0       	ldi	r24, 0x03	; 3
    3fbe:	67 e0       	ldi	r22, 0x07	; 7
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTA_ID, PIN6_ID, LOGIC_LOW);
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	66 e0       	ldi	r22, 0x06	; 6
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    3fd0:	3f c0       	rjmp	.+126    	; 0x4050 <OHMMETER_channelSelect+0x116>
        break;
    case RESISTOR10k:
        GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    3fd2:	83 e0       	ldi	r24, 0x03	; 3
    3fd4:	66 e0       	ldi	r22, 0x06	; 6
    3fd6:	40 e0       	ldi	r20, 0x00	; 0
    3fd8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    3fdc:	83 e0       	ldi	r24, 0x03	; 3
    3fde:	67 e0       	ldi	r22, 0x07	; 7
    3fe0:	41 e0       	ldi	r20, 0x01	; 1
    3fe2:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTA_ID, PIN6_ID, LOGIC_LOW);
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	66 e0       	ldi	r22, 0x06	; 6
    3fea:	40 e0       	ldi	r20, 0x00	; 0
    3fec:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    3ff0:	2f c0       	rjmp	.+94     	; 0x4050 <OHMMETER_channelSelect+0x116>
        break;
    case RESISTOR100k:
        GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    3ff2:	83 e0       	ldi	r24, 0x03	; 3
    3ff4:	66 e0       	ldi	r22, 0x06	; 6
    3ff6:	41 e0       	ldi	r20, 0x01	; 1
    3ff8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    3ffc:	83 e0       	ldi	r24, 0x03	; 3
    3ffe:	67 e0       	ldi	r22, 0x07	; 7
    4000:	41 e0       	ldi	r20, 0x01	; 1
    4002:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTA_ID, PIN6_ID, LOGIC_LOW);
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	66 e0       	ldi	r22, 0x06	; 6
    400a:	40 e0       	ldi	r20, 0x00	; 0
    400c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    4010:	1f c0       	rjmp	.+62     	; 0x4050 <OHMMETER_channelSelect+0x116>
        break;
    case RESISTOR1k:
        GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    4012:	83 e0       	ldi	r24, 0x03	; 3
    4014:	66 e0       	ldi	r22, 0x06	; 6
    4016:	40 e0       	ldi	r20, 0x00	; 0
    4018:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    401c:	83 e0       	ldi	r24, 0x03	; 3
    401e:	67 e0       	ldi	r22, 0x07	; 7
    4020:	40 e0       	ldi	r20, 0x00	; 0
    4022:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTA_ID, PIN6_ID, LOGIC_HIGH);
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	66 e0       	ldi	r22, 0x06	; 6
    402a:	41 e0       	ldi	r20, 0x01	; 1
    402c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
    4030:	0f c0       	rjmp	.+30     	; 0x4050 <OHMMETER_channelSelect+0x116>
        break;
    default:
        GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    4032:	83 e0       	ldi	r24, 0x03	; 3
    4034:	66 e0       	ldi	r22, 0x06	; 6
    4036:	40 e0       	ldi	r20, 0x00	; 0
    4038:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    403c:	83 e0       	ldi	r24, 0x03	; 3
    403e:	67 e0       	ldi	r22, 0x07	; 7
    4040:	40 e0       	ldi	r20, 0x00	; 0
    4042:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        GPIO_writePin(PORTA_ID, PIN6_ID, LOGIC_HIGH);
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	66 e0       	ldi	r22, 0x06	; 6
    404a:	41 e0       	ldi	r20, 0x01	; 1
    404c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <GPIO_writePin>
        break;
    }
    resistor = resistor_table[n];
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	88 0f       	add	r24, r24
    4058:	99 1f       	adc	r25, r25
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	fc 01       	movw	r30, r24
    4060:	e2 5d       	subi	r30, 0xD2	; 210
    4062:	fd 4f       	sbci	r31, 0xFD	; 253
    4064:	80 81       	ld	r24, Z
    4066:	91 81       	ldd	r25, Z+1	; 0x01
    4068:	a2 81       	ldd	r26, Z+2	; 0x02
    406a:	b3 81       	ldd	r27, Z+3	; 0x03
    406c:	80 93 43 02 	sts	0x0243, r24
    4070:	90 93 44 02 	sts	0x0244, r25
    4074:	a0 93 45 02 	sts	0x0245, r26
    4078:	b0 93 46 02 	sts	0x0246, r27
}
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	0f 90       	pop	r0
    4082:	cf 91       	pop	r28
    4084:	df 91       	pop	r29
    4086:	08 95       	ret

00004088 <OHMMERTER_run>:
 *
 * This function initializes the GPIO and ADC, continuously reads the voltage
 * across the unknown resistor, calculates its resistance, and displays the
 * result on an LCD. The function exits when the exit key is pressed.
 */
void OHMMERTER_run(void) {
    4088:	ef 92       	push	r14
    408a:	ff 92       	push	r15
    408c:	0f 93       	push	r16
    408e:	1f 93       	push	r17
    4090:	df 93       	push	r29
    4092:	cf 93       	push	r28
    4094:	cd b7       	in	r28, 0x3d	; 61
    4096:	de b7       	in	r29, 0x3e	; 62
    4098:	e1 97       	sbiw	r28, 0x31	; 49
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    uint16 volt_image;
    uint8 ch_number = RESISTOR100k;
    40a4:	83 e0       	ldi	r24, 0x03	; 3
    40a6:	8f a7       	std	Y+47, r24	; 0x2f

    GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    40a8:	83 e0       	ldi	r24, 0x03	; 3
    40aa:	66 e0       	ldi	r22, 0x06	; 6
    40ac:	41 e0       	ldi	r20, 0x01	; 1
    40ae:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
    GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    40b2:	83 e0       	ldi	r24, 0x03	; 3
    40b4:	67 e0       	ldi	r22, 0x07	; 7
    40b6:	41 e0       	ldi	r20, 0x01	; 1
    40b8:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
    GPIO_setupPinDirection(PORTA_ID, PIN6_ID, PIN_OUTPUT);
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	66 e0       	ldi	r22, 0x06	; 6
    40c0:	41 e0       	ldi	r20, 0x01	; 1
    40c2:	0e 94 65 08 	call	0x10ca	; 0x10ca <GPIO_setupPinDirection>
    LCD_init();
    40c6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <LCD_init>
    ADC_init(5);
    40ca:	85 e0       	ldi	r24, 0x05	; 5
    40cc:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>
    LCD_displayString("Resistance exp:           ");
    40d0:	8b ed       	ldi	r24, 0xDB	; 219
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
    OHMMETER_channelSelect(ch_number);
    40d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40da:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <OHMMETER_channelSelect>

    while (1) {
        while (!ADC_readChannel(&volt_image)) {}
    40de:	ce 01       	movw	r24, r28
    40e0:	c0 96       	adiw	r24, 0x30	; 48
    40e2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <ADC_readChannel>
    40e6:	88 23       	and	r24, r24
    40e8:	d1 f3       	breq	.-12     	; 0x40de <OHMMERTER_run+0x56>
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	a8 ec       	ldi	r26, 0xC8	; 200
    40f0:	b2 e4       	ldi	r27, 0x42	; 66
    40f2:	8f a3       	std	Y+39, r24	; 0x27
    40f4:	98 a7       	std	Y+40, r25	; 0x28
    40f6:	a9 a7       	std	Y+41, r26	; 0x29
    40f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fa:	6f a1       	ldd	r22, Y+39	; 0x27
    40fc:	78 a5       	ldd	r23, Y+40	; 0x28
    40fe:	89 a5       	ldd	r24, Y+41	; 0x29
    4100:	9a a5       	ldd	r25, Y+42	; 0x2a
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	4a e7       	ldi	r20, 0x7A	; 122
    4108:	53 e4       	ldi	r21, 0x43	; 67
    410a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	8b a3       	std	Y+35, r24	; 0x23
    4114:	9c a3       	std	Y+36, r25	; 0x24
    4116:	ad a3       	std	Y+37, r26	; 0x25
    4118:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    411a:	6b a1       	ldd	r22, Y+35	; 0x23
    411c:	7c a1       	ldd	r23, Y+36	; 0x24
    411e:	8d a1       	ldd	r24, Y+37	; 0x25
    4120:	9e a1       	ldd	r25, Y+38	; 0x26
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	40 e8       	ldi	r20, 0x80	; 128
    4128:	5f e3       	ldi	r21, 0x3F	; 63
    412a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    412e:	88 23       	and	r24, r24
    4130:	2c f4       	brge	.+10     	; 0x413c <OHMMERTER_run+0xb4>
		__ticks = 1;
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	9a a3       	std	Y+34, r25	; 0x22
    4138:	89 a3       	std	Y+33, r24	; 0x21
    413a:	3f c0       	rjmp	.+126    	; 0x41ba <OHMMERTER_run+0x132>
	else if (__tmp > 65535)
    413c:	6b a1       	ldd	r22, Y+35	; 0x23
    413e:	7c a1       	ldd	r23, Y+36	; 0x24
    4140:	8d a1       	ldd	r24, Y+37	; 0x25
    4142:	9e a1       	ldd	r25, Y+38	; 0x26
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	3f ef       	ldi	r19, 0xFF	; 255
    4148:	4f e7       	ldi	r20, 0x7F	; 127
    414a:	57 e4       	ldi	r21, 0x47	; 71
    414c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4150:	18 16       	cp	r1, r24
    4152:	4c f5       	brge	.+82     	; 0x41a6 <OHMMERTER_run+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4154:	6f a1       	ldd	r22, Y+39	; 0x27
    4156:	78 a5       	ldd	r23, Y+40	; 0x28
    4158:	89 a5       	ldd	r24, Y+41	; 0x29
    415a:	9a a5       	ldd	r25, Y+42	; 0x2a
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e2       	ldi	r20, 0x20	; 32
    4162:	51 e4       	ldi	r21, 0x41	; 65
    4164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	bc 01       	movw	r22, r24
    416e:	cd 01       	movw	r24, r26
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	9a a3       	std	Y+34, r25	; 0x22
    417a:	89 a3       	std	Y+33, r24	; 0x21
    417c:	0f c0       	rjmp	.+30     	; 0x419c <OHMMERTER_run+0x114>
    417e:	89 e1       	ldi	r24, 0x19	; 25
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	98 a3       	std	Y+32, r25	; 0x20
    4184:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4186:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4188:	98 a1       	ldd	r25, Y+32	; 0x20
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <OHMMERTER_run+0x102>
    418e:	98 a3       	std	Y+32, r25	; 0x20
    4190:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4192:	89 a1       	ldd	r24, Y+33	; 0x21
    4194:	9a a1       	ldd	r25, Y+34	; 0x22
    4196:	01 97       	sbiw	r24, 0x01	; 1
    4198:	9a a3       	std	Y+34, r25	; 0x22
    419a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419c:	89 a1       	ldd	r24, Y+33	; 0x21
    419e:	9a a1       	ldd	r25, Y+34	; 0x22
    41a0:	00 97       	sbiw	r24, 0x00	; 0
    41a2:	69 f7       	brne	.-38     	; 0x417e <OHMMERTER_run+0xf6>
    41a4:	14 c0       	rjmp	.+40     	; 0x41ce <OHMMERTER_run+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a6:	6b a1       	ldd	r22, Y+35	; 0x23
    41a8:	7c a1       	ldd	r23, Y+36	; 0x24
    41aa:	8d a1       	ldd	r24, Y+37	; 0x25
    41ac:	9e a1       	ldd	r25, Y+38	; 0x26
    41ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	9a a3       	std	Y+34, r25	; 0x22
    41b8:	89 a3       	std	Y+33, r24	; 0x21
    41ba:	89 a1       	ldd	r24, Y+33	; 0x21
    41bc:	9a a1       	ldd	r25, Y+34	; 0x22
    41be:	9e 8f       	std	Y+30, r25	; 0x1e
    41c0:	8d 8f       	std	Y+29, r24	; 0x1d
    41c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41c6:	01 97       	sbiw	r24, 0x01	; 1
    41c8:	f1 f7       	brne	.-4      	; 0x41c6 <OHMMERTER_run+0x13e>
    41ca:	9e 8f       	std	Y+30, r25	; 0x1e
    41cc:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(100);

        if (volt_image <= 95) {
    41ce:	88 a9       	ldd	r24, Y+48	; 0x30
    41d0:	99 a9       	ldd	r25, Y+49	; 0x31
    41d2:	80 36       	cpi	r24, 0x60	; 96
    41d4:	91 05       	cpc	r25, r1
    41d6:	08 f0       	brcs	.+2      	; 0x41da <OHMMERTER_run+0x152>
    41d8:	ef c0       	rjmp	.+478    	; 0x43b8 <OHMMERTER_run+0x330>
            ch_number = RESISTOR10k;
    41da:	82 e0       	ldi	r24, 0x02	; 2
    41dc:	8f a7       	std	Y+47, r24	; 0x2f
            OHMMETER_channelSelect(ch_number);
    41de:	8f a5       	ldd	r24, Y+47	; 0x2f
    41e0:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <OHMMETER_channelSelect>
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	a8 e4       	ldi	r26, 0x48	; 72
    41ea:	b2 e4       	ldi	r27, 0x42	; 66
    41ec:	89 8f       	std	Y+25, r24	; 0x19
    41ee:	9a 8f       	std	Y+26, r25	; 0x1a
    41f0:	ab 8f       	std	Y+27, r26	; 0x1b
    41f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f4:	69 8d       	ldd	r22, Y+25	; 0x19
    41f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	4a e7       	ldi	r20, 0x7A	; 122
    4202:	53 e4       	ldi	r21, 0x43	; 67
    4204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	8d 8b       	std	Y+21, r24	; 0x15
    420e:	9e 8b       	std	Y+22, r25	; 0x16
    4210:	af 8b       	std	Y+23, r26	; 0x17
    4212:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4214:	6d 89       	ldd	r22, Y+21	; 0x15
    4216:	7e 89       	ldd	r23, Y+22	; 0x16
    4218:	8f 89       	ldd	r24, Y+23	; 0x17
    421a:	98 8d       	ldd	r25, Y+24	; 0x18
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	40 e8       	ldi	r20, 0x80	; 128
    4222:	5f e3       	ldi	r21, 0x3F	; 63
    4224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4228:	88 23       	and	r24, r24
    422a:	2c f4       	brge	.+10     	; 0x4236 <OHMMERTER_run+0x1ae>
		__ticks = 1;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	9c 8b       	std	Y+20, r25	; 0x14
    4232:	8b 8b       	std	Y+19, r24	; 0x13
    4234:	3f c0       	rjmp	.+126    	; 0x42b4 <OHMMERTER_run+0x22c>
	else if (__tmp > 65535)
    4236:	6d 89       	ldd	r22, Y+21	; 0x15
    4238:	7e 89       	ldd	r23, Y+22	; 0x16
    423a:	8f 89       	ldd	r24, Y+23	; 0x17
    423c:	98 8d       	ldd	r25, Y+24	; 0x18
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	3f ef       	ldi	r19, 0xFF	; 255
    4242:	4f e7       	ldi	r20, 0x7F	; 127
    4244:	57 e4       	ldi	r21, 0x47	; 71
    4246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    424a:	18 16       	cp	r1, r24
    424c:	4c f5       	brge	.+82     	; 0x42a0 <OHMMERTER_run+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    424e:	69 8d       	ldd	r22, Y+25	; 0x19
    4250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e2       	ldi	r20, 0x20	; 32
    425c:	51 e4       	ldi	r21, 0x41	; 65
    425e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	bc 01       	movw	r22, r24
    4268:	cd 01       	movw	r24, r26
    426a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	9c 8b       	std	Y+20, r25	; 0x14
    4274:	8b 8b       	std	Y+19, r24	; 0x13
    4276:	0f c0       	rjmp	.+30     	; 0x4296 <OHMMERTER_run+0x20e>
    4278:	89 e1       	ldi	r24, 0x19	; 25
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	9a 8b       	std	Y+18, r25	; 0x12
    427e:	89 8b       	std	Y+17, r24	; 0x11
    4280:	89 89       	ldd	r24, Y+17	; 0x11
    4282:	9a 89       	ldd	r25, Y+18	; 0x12
    4284:	01 97       	sbiw	r24, 0x01	; 1
    4286:	f1 f7       	brne	.-4      	; 0x4284 <OHMMERTER_run+0x1fc>
    4288:	9a 8b       	std	Y+18, r25	; 0x12
    428a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428c:	8b 89       	ldd	r24, Y+19	; 0x13
    428e:	9c 89       	ldd	r25, Y+20	; 0x14
    4290:	01 97       	sbiw	r24, 0x01	; 1
    4292:	9c 8b       	std	Y+20, r25	; 0x14
    4294:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4296:	8b 89       	ldd	r24, Y+19	; 0x13
    4298:	9c 89       	ldd	r25, Y+20	; 0x14
    429a:	00 97       	sbiw	r24, 0x00	; 0
    429c:	69 f7       	brne	.-38     	; 0x4278 <OHMMERTER_run+0x1f0>
    429e:	14 c0       	rjmp	.+40     	; 0x42c8 <OHMMERTER_run+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a0:	6d 89       	ldd	r22, Y+21	; 0x15
    42a2:	7e 89       	ldd	r23, Y+22	; 0x16
    42a4:	8f 89       	ldd	r24, Y+23	; 0x17
    42a6:	98 8d       	ldd	r25, Y+24	; 0x18
    42a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ac:	dc 01       	movw	r26, r24
    42ae:	cb 01       	movw	r24, r22
    42b0:	9c 8b       	std	Y+20, r25	; 0x14
    42b2:	8b 8b       	std	Y+19, r24	; 0x13
    42b4:	8b 89       	ldd	r24, Y+19	; 0x13
    42b6:	9c 89       	ldd	r25, Y+20	; 0x14
    42b8:	98 8b       	std	Y+16, r25	; 0x10
    42ba:	8f 87       	std	Y+15, r24	; 0x0f
    42bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42be:	98 89       	ldd	r25, Y+16	; 0x10
    42c0:	01 97       	sbiw	r24, 0x01	; 1
    42c2:	f1 f7       	brne	.-4      	; 0x42c0 <OHMMERTER_run+0x238>
    42c4:	98 8b       	std	Y+16, r25	; 0x10
    42c6:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(50);
            while (!ADC_readChannel(&volt_image)) {}
    42c8:	ce 01       	movw	r24, r28
    42ca:	c0 96       	adiw	r24, 0x30	; 48
    42cc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <ADC_readChannel>
    42d0:	88 23       	and	r24, r24
    42d2:	d1 f3       	breq	.-12     	; 0x42c8 <OHMMERTER_run+0x240>
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	a8 e4       	ldi	r26, 0x48	; 72
    42da:	b2 e4       	ldi	r27, 0x42	; 66
    42dc:	8b 87       	std	Y+11, r24	; 0x0b
    42de:	9c 87       	std	Y+12, r25	; 0x0c
    42e0:	ad 87       	std	Y+13, r26	; 0x0d
    42e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	4a e7       	ldi	r20, 0x7A	; 122
    42f2:	53 e4       	ldi	r21, 0x43	; 67
    42f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	8f 83       	std	Y+7, r24	; 0x07
    42fe:	98 87       	std	Y+8, r25	; 0x08
    4300:	a9 87       	std	Y+9, r26	; 0x09
    4302:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4304:	6f 81       	ldd	r22, Y+7	; 0x07
    4306:	78 85       	ldd	r23, Y+8	; 0x08
    4308:	89 85       	ldd	r24, Y+9	; 0x09
    430a:	9a 85       	ldd	r25, Y+10	; 0x0a
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e8       	ldi	r20, 0x80	; 128
    4312:	5f e3       	ldi	r21, 0x3F	; 63
    4314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4318:	88 23       	and	r24, r24
    431a:	2c f4       	brge	.+10     	; 0x4326 <OHMMERTER_run+0x29e>
		__ticks = 1;
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	9e 83       	std	Y+6, r25	; 0x06
    4322:	8d 83       	std	Y+5, r24	; 0x05
    4324:	3f c0       	rjmp	.+126    	; 0x43a4 <OHMMERTER_run+0x31c>
	else if (__tmp > 65535)
    4326:	6f 81       	ldd	r22, Y+7	; 0x07
    4328:	78 85       	ldd	r23, Y+8	; 0x08
    432a:	89 85       	ldd	r24, Y+9	; 0x09
    432c:	9a 85       	ldd	r25, Y+10	; 0x0a
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	3f ef       	ldi	r19, 0xFF	; 255
    4332:	4f e7       	ldi	r20, 0x7F	; 127
    4334:	57 e4       	ldi	r21, 0x47	; 71
    4336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    433a:	18 16       	cp	r1, r24
    433c:	4c f5       	brge	.+82     	; 0x4390 <OHMMERTER_run+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4340:	7c 85       	ldd	r23, Y+12	; 0x0c
    4342:	8d 85       	ldd	r24, Y+13	; 0x0d
    4344:	9e 85       	ldd	r25, Y+14	; 0x0e
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	40 e2       	ldi	r20, 0x20	; 32
    434c:	51 e4       	ldi	r21, 0x41	; 65
    434e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	bc 01       	movw	r22, r24
    4358:	cd 01       	movw	r24, r26
    435a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	9e 83       	std	Y+6, r25	; 0x06
    4364:	8d 83       	std	Y+5, r24	; 0x05
    4366:	0f c0       	rjmp	.+30     	; 0x4386 <OHMMERTER_run+0x2fe>
    4368:	89 e1       	ldi	r24, 0x19	; 25
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	9c 83       	std	Y+4, r25	; 0x04
    436e:	8b 83       	std	Y+3, r24	; 0x03
    4370:	8b 81       	ldd	r24, Y+3	; 0x03
    4372:	9c 81       	ldd	r25, Y+4	; 0x04
    4374:	01 97       	sbiw	r24, 0x01	; 1
    4376:	f1 f7       	brne	.-4      	; 0x4374 <OHMMERTER_run+0x2ec>
    4378:	9c 83       	std	Y+4, r25	; 0x04
    437a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437c:	8d 81       	ldd	r24, Y+5	; 0x05
    437e:	9e 81       	ldd	r25, Y+6	; 0x06
    4380:	01 97       	sbiw	r24, 0x01	; 1
    4382:	9e 83       	std	Y+6, r25	; 0x06
    4384:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4386:	8d 81       	ldd	r24, Y+5	; 0x05
    4388:	9e 81       	ldd	r25, Y+6	; 0x06
    438a:	00 97       	sbiw	r24, 0x00	; 0
    438c:	69 f7       	brne	.-38     	; 0x4368 <OHMMERTER_run+0x2e0>
    438e:	14 c0       	rjmp	.+40     	; 0x43b8 <OHMMERTER_run+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4390:	6f 81       	ldd	r22, Y+7	; 0x07
    4392:	78 85       	ldd	r23, Y+8	; 0x08
    4394:	89 85       	ldd	r24, Y+9	; 0x09
    4396:	9a 85       	ldd	r25, Y+10	; 0x0a
    4398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	9e 83       	std	Y+6, r25	; 0x06
    43a2:	8d 83       	std	Y+5, r24	; 0x05
    43a4:	8d 81       	ldd	r24, Y+5	; 0x05
    43a6:	9e 81       	ldd	r25, Y+6	; 0x06
    43a8:	9a 83       	std	Y+2, r25	; 0x02
    43aa:	89 83       	std	Y+1, r24	; 0x01
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	9a 81       	ldd	r25, Y+2	; 0x02
    43b0:	01 97       	sbiw	r24, 0x01	; 1
    43b2:	f1 f7       	brne	.-4      	; 0x43b0 <OHMMERTER_run+0x328>
    43b4:	9a 83       	std	Y+2, r25	; 0x02
    43b6:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(50);
        }

        LCD_moveCursor(1, 15);
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	6f e0       	ldi	r22, 0x0F	; 15
    43bc:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
        LCD_intgerToString(ch_number);
    43c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    43c2:	88 2f       	mov	r24, r24
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
        LCD_moveCursor(1, 0);
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	60 e0       	ldi	r22, 0x00	; 0
    43ce:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>

        uint32 value = volt_image * (resistor + 330) / (1023 - volt_image);
    43d2:	88 a9       	ldd	r24, Y+48	; 0x30
    43d4:	99 a9       	ldd	r25, Y+49	; 0x31
    43d6:	7c 01       	movw	r14, r24
    43d8:	00 e0       	ldi	r16, 0x00	; 0
    43da:	10 e0       	ldi	r17, 0x00	; 0
    43dc:	80 91 43 02 	lds	r24, 0x0243
    43e0:	90 91 44 02 	lds	r25, 0x0244
    43e4:	a0 91 45 02 	lds	r26, 0x0245
    43e8:	b0 91 46 02 	lds	r27, 0x0246
    43ec:	9c 01       	movw	r18, r24
    43ee:	ad 01       	movw	r20, r26
    43f0:	26 5b       	subi	r18, 0xB6	; 182
    43f2:	3e 4f       	sbci	r19, 0xFE	; 254
    43f4:	4f 4f       	sbci	r20, 0xFF	; 255
    43f6:	5f 4f       	sbci	r21, 0xFF	; 255
    43f8:	c8 01       	movw	r24, r16
    43fa:	b7 01       	movw	r22, r14
    43fc:	0e 94 ef 22 	call	0x45de	; 0x45de <__mulsi3>
    4400:	7b 01       	movw	r14, r22
    4402:	8c 01       	movw	r16, r24
    4404:	28 a9       	ldd	r18, Y+48	; 0x30
    4406:	39 a9       	ldd	r19, Y+49	; 0x31
    4408:	8f ef       	ldi	r24, 0xFF	; 255
    440a:	93 e0       	ldi	r25, 0x03	; 3
    440c:	82 1b       	sub	r24, r18
    440e:	93 0b       	sbc	r25, r19
    4410:	9c 01       	movw	r18, r24
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	50 e0       	ldi	r21, 0x00	; 0
    4416:	c8 01       	movw	r24, r16
    4418:	b7 01       	movw	r22, r14
    441a:	0e 94 35 23 	call	0x466a	; 0x466a <__udivmodsi4>
    441e:	da 01       	movw	r26, r20
    4420:	c9 01       	movw	r24, r18
    4422:	8b a7       	std	Y+43, r24	; 0x2b
    4424:	9c a7       	std	Y+44, r25	; 0x2c
    4426:	ad a7       	std	Y+45, r26	; 0x2d
    4428:	be a7       	std	Y+46, r27	; 0x2e
        if (value > 1000) {
    442a:	8b a5       	ldd	r24, Y+43	; 0x2b
    442c:	9c a5       	ldd	r25, Y+44	; 0x2c
    442e:	ad a5       	ldd	r26, Y+45	; 0x2d
    4430:	be a5       	ldd	r27, Y+46	; 0x2e
    4432:	89 3e       	cpi	r24, 0xE9	; 233
    4434:	23 e0       	ldi	r18, 0x03	; 3
    4436:	92 07       	cpc	r25, r18
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	a2 07       	cpc	r26, r18
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	b2 07       	cpc	r27, r18
    4440:	48 f1       	brcs	.+82     	; 0x4494 <OHMMERTER_run+0x40c>
            LCD_intgerToString(value / 1000);
    4442:	8b a5       	ldd	r24, Y+43	; 0x2b
    4444:	9c a5       	ldd	r25, Y+44	; 0x2c
    4446:	ad a5       	ldd	r26, Y+45	; 0x2d
    4448:	be a5       	ldd	r27, Y+46	; 0x2e
    444a:	28 ee       	ldi	r18, 0xE8	; 232
    444c:	33 e0       	ldi	r19, 0x03	; 3
    444e:	40 e0       	ldi	r20, 0x00	; 0
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	bc 01       	movw	r22, r24
    4454:	cd 01       	movw	r24, r26
    4456:	0e 94 35 23 	call	0x466a	; 0x466a <__udivmodsi4>
    445a:	da 01       	movw	r26, r20
    445c:	c9 01       	movw	r24, r18
    445e:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(".");
    4462:	81 e7       	ldi	r24, 0x71	; 113
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
            LCD_intgerToString(value % 1000);
    446a:	8b a5       	ldd	r24, Y+43	; 0x2b
    446c:	9c a5       	ldd	r25, Y+44	; 0x2c
    446e:	ad a5       	ldd	r26, Y+45	; 0x2d
    4470:	be a5       	ldd	r27, Y+46	; 0x2e
    4472:	28 ee       	ldi	r18, 0xE8	; 232
    4474:	33 e0       	ldi	r19, 0x03	; 3
    4476:	40 e0       	ldi	r20, 0x00	; 0
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	bc 01       	movw	r22, r24
    447c:	cd 01       	movw	r24, r26
    447e:	0e 94 35 23 	call	0x466a	; 0x466a <__udivmodsi4>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" kohm          ");
    448a:	86 ef       	ldi	r24, 0xF6	; 246
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
    4492:	14 c0       	rjmp	.+40     	; 0x44bc <OHMMERTER_run+0x434>
        } else {
            LCD_intgerToString(value % 1000);
    4494:	8b a5       	ldd	r24, Y+43	; 0x2b
    4496:	9c a5       	ldd	r25, Y+44	; 0x2c
    4498:	ad a5       	ldd	r26, Y+45	; 0x2d
    449a:	be a5       	ldd	r27, Y+46	; 0x2e
    449c:	28 ee       	ldi	r18, 0xE8	; 232
    449e:	33 e0       	ldi	r19, 0x03	; 3
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	50 e0       	ldi	r21, 0x00	; 0
    44a4:	bc 01       	movw	r22, r24
    44a6:	cd 01       	movw	r24, r26
    44a8:	0e 94 35 23 	call	0x466a	; 0x466a <__udivmodsi4>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	0e 94 47 18 	call	0x308e	; 0x308e <LCD_intgerToString>
            LCD_displayString(" ohm          ");
    44b4:	86 e0       	ldi	r24, 0x06	; 6
    44b6:	91 e0       	ldi	r25, 0x01	; 1
    44b8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_displayString>
        }
        KEYPAD_getPressedKeyInterrupts(&exit_check);
    44bc:	82 e4       	ldi	r24, 0x42	; 66
    44be:	92 e0       	ldi	r25, 0x02	; 2
    44c0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <KEYPAD_getPressedKeyInterrupts>
        if (exit_check == EXIT_OPERATION) {
    44c4:	80 91 42 02 	lds	r24, 0x0242
    44c8:	8d 33       	cpi	r24, 0x3D	; 61
    44ca:	09 f0       	breq	.+2      	; 0x44ce <OHMMERTER_run+0x446>
    44cc:	08 ce       	rjmp	.-1008   	; 0x40de <OHMMERTER_run+0x56>
            LCD_clearScreen();
    44ce:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            exit_check = 'a';
    44d2:	81 e6       	ldi	r24, 0x61	; 97
    44d4:	80 93 42 02 	sts	0x0242, r24
            break;
        }
    }
    44d8:	e1 96       	adiw	r28, 0x31	; 49
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	de bf       	out	0x3e, r29	; 62
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	cf 91       	pop	r28
    44e6:	df 91       	pop	r29
    44e8:	1f 91       	pop	r17
    44ea:	0f 91       	pop	r16
    44ec:	ff 90       	pop	r15
    44ee:	ef 90       	pop	r14
    44f0:	08 95       	ret

000044f2 <main>:
 * ammeter, AC ammeter, or ohmmeter). It executes the chosen operation and
 * allows the user to exit back to the menu.
 *
 * @return int Exit status (not used in this embedded application).
 */
int main(void) {
    44f2:	df 93       	push	r29
    44f4:	cf 93       	push	r28
    44f6:	00 d0       	rcall	.+0      	; 0x44f8 <main+0x6>
    44f8:	0f 92       	push	r0
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    SREG |= (1 << 7);  // Enable global interrupts
    44fe:	af e5       	ldi	r26, 0x5F	; 95
    4500:	b0 e0       	ldi	r27, 0x00	; 0
    4502:	ef e5       	ldi	r30, 0x5F	; 95
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	80 81       	ld	r24, Z
    4508:	80 68       	ori	r24, 0x80	; 128
    450a:	8c 93       	st	X, r24
    LCD_init();
    450c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <LCD_init>
    UsedOperation used_case;

    while (1) {
        if (exit_check == 'a') {
    4510:	80 91 42 02 	lds	r24, 0x0242
    4514:	81 36       	cpi	r24, 0x61	; 97
    4516:	41 f4       	brne	.+16     	; 0x4528 <main+0x36>
            LCD_clearScreen();
    4518:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            LCD_moveCursor(0, 0);
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
            exit_check = 0;
    4524:	10 92 42 02 	sts	0x0242, r1
        }
        LCD_displayStringRowColumn(0, 0, "choose operation");
    4528:	25 e1       	ldi	r18, 0x15	; 21
    452a:	31 e0       	ldi	r19, 0x01	; 1
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	60 e0       	ldi	r22, 0x00	; 0
    4530:	a9 01       	movw	r20, r18
    4532:	0e 94 2e 18 	call	0x305c	; 0x305c <LCD_displayStringRowColumn>
        used_case = KEYPAD_getPressedKeyPolling();
    4536:	0e 94 a7 0b 	call	0x174e	; 0x174e <KEYPAD_getPressedKeyPolling>
    453a:	89 83       	std	Y+1, r24	; 0x01

        switch (used_case) {
    453c:	89 81       	ldd	r24, Y+1	; 0x01
    453e:	28 2f       	mov	r18, r24
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	3b 83       	std	Y+3, r19	; 0x03
    4544:	2a 83       	std	Y+2, r18	; 0x02
    4546:	8a 81       	ldd	r24, Y+2	; 0x02
    4548:	9b 81       	ldd	r25, Y+3	; 0x03
    454a:	82 30       	cpi	r24, 0x02	; 2
    454c:	91 05       	cpc	r25, r1
    454e:	61 f1       	breq	.+88     	; 0x45a8 <main+0xb6>
    4550:	2a 81       	ldd	r18, Y+2	; 0x02
    4552:	3b 81       	ldd	r19, Y+3	; 0x03
    4554:	23 30       	cpi	r18, 0x03	; 3
    4556:	31 05       	cpc	r19, r1
    4558:	54 f4       	brge	.+20     	; 0x456e <main+0x7c>
    455a:	8a 81       	ldd	r24, Y+2	; 0x02
    455c:	9b 81       	ldd	r25, Y+3	; 0x03
    455e:	00 97       	sbiw	r24, 0x00	; 0
    4560:	89 f0       	breq	.+34     	; 0x4584 <main+0x92>
    4562:	2a 81       	ldd	r18, Y+2	; 0x02
    4564:	3b 81       	ldd	r19, Y+3	; 0x03
    4566:	21 30       	cpi	r18, 0x01	; 1
    4568:	31 05       	cpc	r19, r1
    456a:	a9 f0       	breq	.+42     	; 0x4596 <main+0xa4>
    456c:	d1 cf       	rjmp	.-94     	; 0x4510 <main+0x1e>
    456e:	8a 81       	ldd	r24, Y+2	; 0x02
    4570:	9b 81       	ldd	r25, Y+3	; 0x03
    4572:	83 30       	cpi	r24, 0x03	; 3
    4574:	91 05       	cpc	r25, r1
    4576:	09 f1       	breq	.+66     	; 0x45ba <main+0xc8>
    4578:	2a 81       	ldd	r18, Y+2	; 0x02
    457a:	3b 81       	ldd	r19, Y+3	; 0x03
    457c:	24 30       	cpi	r18, 0x04	; 4
    457e:	31 05       	cpc	r19, r1
    4580:	29 f1       	breq	.+74     	; 0x45cc <main+0xda>
    4582:	c6 cf       	rjmp	.-116    	; 0x4510 <main+0x1e>
        case DC_VOLTMETER:
            LCD_clearScreen();
    4584:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            LCD_moveCursor(0, 0);
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	60 e0       	ldi	r22, 0x00	; 0
    458c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
            DCVOLTMETER_run();
    4590:	0e 94 99 1c 	call	0x3932	; 0x3932 <DCVOLTMETER_run>
    4594:	bd cf       	rjmp	.-134    	; 0x4510 <main+0x1e>
            break;
        case AC_VOLTMETER:
            LCD_clearScreen();
    4596:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            LCD_moveCursor(0, 0);
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
            ACVOLTMETER_run();
    45a2:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <ACVOLTMETER_run>
    45a6:	b4 cf       	rjmp	.-152    	; 0x4510 <main+0x1e>
            break;
        case DC_AMMETER:
            LCD_clearScreen();
    45a8:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            LCD_moveCursor(0, 0);
    45ac:	80 e0       	ldi	r24, 0x00	; 0
    45ae:	60 e0       	ldi	r22, 0x00	; 0
    45b0:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
            DCAMMETER_run();
    45b4:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <DCAMMETER_run>
    45b8:	ab cf       	rjmp	.-170    	; 0x4510 <main+0x1e>
            break;
        case AC_AMMETER:
            LCD_clearScreen();
    45ba:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            LCD_moveCursor(0, 0);
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	60 e0       	ldi	r22, 0x00	; 0
    45c2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
            ACAMMETER_run();
    45c6:	0e 94 3f 1b 	call	0x367e	; 0x367e <ACAMMETER_run>
    45ca:	a2 cf       	rjmp	.-188    	; 0x4510 <main+0x1e>
            break;
        case OHMMETER:
            LCD_clearScreen();
    45cc:	0e 94 4d 19 	call	0x329a	; 0x329a <LCD_clearScreen>
            LCD_moveCursor(0, 0);
    45d0:	80 e0       	ldi	r24, 0x00	; 0
    45d2:	60 e0       	ldi	r22, 0x00	; 0
    45d4:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_moveCursor>
            OHMMERTER_run();
    45d8:	0e 94 44 20 	call	0x4088	; 0x4088 <OHMMERTER_run>
    45dc:	99 cf       	rjmp	.-206    	; 0x4510 <main+0x1e>

000045de <__mulsi3>:
    45de:	62 9f       	mul	r22, r18
    45e0:	d0 01       	movw	r26, r0
    45e2:	73 9f       	mul	r23, r19
    45e4:	f0 01       	movw	r30, r0
    45e6:	82 9f       	mul	r24, r18
    45e8:	e0 0d       	add	r30, r0
    45ea:	f1 1d       	adc	r31, r1
    45ec:	64 9f       	mul	r22, r20
    45ee:	e0 0d       	add	r30, r0
    45f0:	f1 1d       	adc	r31, r1
    45f2:	92 9f       	mul	r25, r18
    45f4:	f0 0d       	add	r31, r0
    45f6:	83 9f       	mul	r24, r19
    45f8:	f0 0d       	add	r31, r0
    45fa:	74 9f       	mul	r23, r20
    45fc:	f0 0d       	add	r31, r0
    45fe:	65 9f       	mul	r22, r21
    4600:	f0 0d       	add	r31, r0
    4602:	99 27       	eor	r25, r25
    4604:	72 9f       	mul	r23, r18
    4606:	b0 0d       	add	r27, r0
    4608:	e1 1d       	adc	r30, r1
    460a:	f9 1f       	adc	r31, r25
    460c:	63 9f       	mul	r22, r19
    460e:	b0 0d       	add	r27, r0
    4610:	e1 1d       	adc	r30, r1
    4612:	f9 1f       	adc	r31, r25
    4614:	bd 01       	movw	r22, r26
    4616:	cf 01       	movw	r24, r30
    4618:	11 24       	eor	r1, r1
    461a:	08 95       	ret

0000461c <__udivmodhi4>:
    461c:	aa 1b       	sub	r26, r26
    461e:	bb 1b       	sub	r27, r27
    4620:	51 e1       	ldi	r21, 0x11	; 17
    4622:	07 c0       	rjmp	.+14     	; 0x4632 <__udivmodhi4_ep>

00004624 <__udivmodhi4_loop>:
    4624:	aa 1f       	adc	r26, r26
    4626:	bb 1f       	adc	r27, r27
    4628:	a6 17       	cp	r26, r22
    462a:	b7 07       	cpc	r27, r23
    462c:	10 f0       	brcs	.+4      	; 0x4632 <__udivmodhi4_ep>
    462e:	a6 1b       	sub	r26, r22
    4630:	b7 0b       	sbc	r27, r23

00004632 <__udivmodhi4_ep>:
    4632:	88 1f       	adc	r24, r24
    4634:	99 1f       	adc	r25, r25
    4636:	5a 95       	dec	r21
    4638:	a9 f7       	brne	.-22     	; 0x4624 <__udivmodhi4_loop>
    463a:	80 95       	com	r24
    463c:	90 95       	com	r25
    463e:	bc 01       	movw	r22, r24
    4640:	cd 01       	movw	r24, r26
    4642:	08 95       	ret

00004644 <__divmodhi4>:
    4644:	97 fb       	bst	r25, 7
    4646:	09 2e       	mov	r0, r25
    4648:	07 26       	eor	r0, r23
    464a:	0a d0       	rcall	.+20     	; 0x4660 <__divmodhi4_neg1>
    464c:	77 fd       	sbrc	r23, 7
    464e:	04 d0       	rcall	.+8      	; 0x4658 <__divmodhi4_neg2>
    4650:	e5 df       	rcall	.-54     	; 0x461c <__udivmodhi4>
    4652:	06 d0       	rcall	.+12     	; 0x4660 <__divmodhi4_neg1>
    4654:	00 20       	and	r0, r0
    4656:	1a f4       	brpl	.+6      	; 0x465e <__divmodhi4_exit>

00004658 <__divmodhi4_neg2>:
    4658:	70 95       	com	r23
    465a:	61 95       	neg	r22
    465c:	7f 4f       	sbci	r23, 0xFF	; 255

0000465e <__divmodhi4_exit>:
    465e:	08 95       	ret

00004660 <__divmodhi4_neg1>:
    4660:	f6 f7       	brtc	.-4      	; 0x465e <__divmodhi4_exit>
    4662:	90 95       	com	r25
    4664:	81 95       	neg	r24
    4666:	9f 4f       	sbci	r25, 0xFF	; 255
    4668:	08 95       	ret

0000466a <__udivmodsi4>:
    466a:	a1 e2       	ldi	r26, 0x21	; 33
    466c:	1a 2e       	mov	r1, r26
    466e:	aa 1b       	sub	r26, r26
    4670:	bb 1b       	sub	r27, r27
    4672:	fd 01       	movw	r30, r26
    4674:	0d c0       	rjmp	.+26     	; 0x4690 <__udivmodsi4_ep>

00004676 <__udivmodsi4_loop>:
    4676:	aa 1f       	adc	r26, r26
    4678:	bb 1f       	adc	r27, r27
    467a:	ee 1f       	adc	r30, r30
    467c:	ff 1f       	adc	r31, r31
    467e:	a2 17       	cp	r26, r18
    4680:	b3 07       	cpc	r27, r19
    4682:	e4 07       	cpc	r30, r20
    4684:	f5 07       	cpc	r31, r21
    4686:	20 f0       	brcs	.+8      	; 0x4690 <__udivmodsi4_ep>
    4688:	a2 1b       	sub	r26, r18
    468a:	b3 0b       	sbc	r27, r19
    468c:	e4 0b       	sbc	r30, r20
    468e:	f5 0b       	sbc	r31, r21

00004690 <__udivmodsi4_ep>:
    4690:	66 1f       	adc	r22, r22
    4692:	77 1f       	adc	r23, r23
    4694:	88 1f       	adc	r24, r24
    4696:	99 1f       	adc	r25, r25
    4698:	1a 94       	dec	r1
    469a:	69 f7       	brne	.-38     	; 0x4676 <__udivmodsi4_loop>
    469c:	60 95       	com	r22
    469e:	70 95       	com	r23
    46a0:	80 95       	com	r24
    46a2:	90 95       	com	r25
    46a4:	9b 01       	movw	r18, r22
    46a6:	ac 01       	movw	r20, r24
    46a8:	bd 01       	movw	r22, r26
    46aa:	cf 01       	movw	r24, r30
    46ac:	08 95       	ret

000046ae <__prologue_saves__>:
    46ae:	2f 92       	push	r2
    46b0:	3f 92       	push	r3
    46b2:	4f 92       	push	r4
    46b4:	5f 92       	push	r5
    46b6:	6f 92       	push	r6
    46b8:	7f 92       	push	r7
    46ba:	8f 92       	push	r8
    46bc:	9f 92       	push	r9
    46be:	af 92       	push	r10
    46c0:	bf 92       	push	r11
    46c2:	cf 92       	push	r12
    46c4:	df 92       	push	r13
    46c6:	ef 92       	push	r14
    46c8:	ff 92       	push	r15
    46ca:	0f 93       	push	r16
    46cc:	1f 93       	push	r17
    46ce:	cf 93       	push	r28
    46d0:	df 93       	push	r29
    46d2:	cd b7       	in	r28, 0x3d	; 61
    46d4:	de b7       	in	r29, 0x3e	; 62
    46d6:	ca 1b       	sub	r28, r26
    46d8:	db 0b       	sbc	r29, r27
    46da:	0f b6       	in	r0, 0x3f	; 63
    46dc:	f8 94       	cli
    46de:	de bf       	out	0x3e, r29	; 62
    46e0:	0f be       	out	0x3f, r0	; 63
    46e2:	cd bf       	out	0x3d, r28	; 61
    46e4:	09 94       	ijmp

000046e6 <__epilogue_restores__>:
    46e6:	2a 88       	ldd	r2, Y+18	; 0x12
    46e8:	39 88       	ldd	r3, Y+17	; 0x11
    46ea:	48 88       	ldd	r4, Y+16	; 0x10
    46ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    46ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    46f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    46f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    46f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    46f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    46f8:	b9 84       	ldd	r11, Y+9	; 0x09
    46fa:	c8 84       	ldd	r12, Y+8	; 0x08
    46fc:	df 80       	ldd	r13, Y+7	; 0x07
    46fe:	ee 80       	ldd	r14, Y+6	; 0x06
    4700:	fd 80       	ldd	r15, Y+5	; 0x05
    4702:	0c 81       	ldd	r16, Y+4	; 0x04
    4704:	1b 81       	ldd	r17, Y+3	; 0x03
    4706:	aa 81       	ldd	r26, Y+2	; 0x02
    4708:	b9 81       	ldd	r27, Y+1	; 0x01
    470a:	ce 0f       	add	r28, r30
    470c:	d1 1d       	adc	r29, r1
    470e:	0f b6       	in	r0, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	de bf       	out	0x3e, r29	; 62
    4714:	0f be       	out	0x3f, r0	; 63
    4716:	cd bf       	out	0x3d, r28	; 61
    4718:	ed 01       	movw	r28, r26
    471a:	08 95       	ret

0000471c <itoa>:
    471c:	fb 01       	movw	r30, r22
    471e:	9f 01       	movw	r18, r30
    4720:	e8 94       	clt
    4722:	42 30       	cpi	r20, 0x02	; 2
    4724:	c4 f0       	brlt	.+48     	; 0x4756 <itoa+0x3a>
    4726:	45 32       	cpi	r20, 0x25	; 37
    4728:	b4 f4       	brge	.+44     	; 0x4756 <itoa+0x3a>
    472a:	4a 30       	cpi	r20, 0x0A	; 10
    472c:	29 f4       	brne	.+10     	; 0x4738 <itoa+0x1c>
    472e:	97 fb       	bst	r25, 7
    4730:	1e f4       	brtc	.+6      	; 0x4738 <itoa+0x1c>
    4732:	90 95       	com	r25
    4734:	81 95       	neg	r24
    4736:	9f 4f       	sbci	r25, 0xFF	; 255
    4738:	64 2f       	mov	r22, r20
    473a:	77 27       	eor	r23, r23
    473c:	0e 94 0e 23 	call	0x461c	; 0x461c <__udivmodhi4>
    4740:	80 5d       	subi	r24, 0xD0	; 208
    4742:	8a 33       	cpi	r24, 0x3A	; 58
    4744:	0c f0       	brlt	.+2      	; 0x4748 <itoa+0x2c>
    4746:	89 5d       	subi	r24, 0xD9	; 217
    4748:	81 93       	st	Z+, r24
    474a:	cb 01       	movw	r24, r22
    474c:	00 97       	sbiw	r24, 0x00	; 0
    474e:	a1 f7       	brne	.-24     	; 0x4738 <itoa+0x1c>
    4750:	16 f4       	brtc	.+4      	; 0x4756 <itoa+0x3a>
    4752:	5d e2       	ldi	r21, 0x2D	; 45
    4754:	51 93       	st	Z+, r21
    4756:	10 82       	st	Z, r1
    4758:	c9 01       	movw	r24, r18
    475a:	0c 94 af 23 	jmp	0x475e	; 0x475e <strrev>

0000475e <strrev>:
    475e:	dc 01       	movw	r26, r24
    4760:	fc 01       	movw	r30, r24
    4762:	67 2f       	mov	r22, r23
    4764:	71 91       	ld	r23, Z+
    4766:	77 23       	and	r23, r23
    4768:	e1 f7       	brne	.-8      	; 0x4762 <strrev+0x4>
    476a:	32 97       	sbiw	r30, 0x02	; 2
    476c:	04 c0       	rjmp	.+8      	; 0x4776 <strrev+0x18>
    476e:	7c 91       	ld	r23, X
    4770:	6d 93       	st	X+, r22
    4772:	70 83       	st	Z, r23
    4774:	62 91       	ld	r22, -Z
    4776:	ae 17       	cp	r26, r30
    4778:	bf 07       	cpc	r27, r31
    477a:	c8 f3       	brcs	.-14     	; 0x476e <strrev+0x10>
    477c:	08 95       	ret

0000477e <_exit>:
    477e:	f8 94       	cli

00004780 <__stop_program>:
    4780:	ff cf       	rjmp	.-2      	; 0x4780 <__stop_program>
